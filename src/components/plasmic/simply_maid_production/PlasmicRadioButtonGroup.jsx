// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dCBp3p2g2cgYAgGFEQRPSF
// Component: wYWrhsBd9p4L
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  initializePlasmicStates,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import RadioButton from "../../RadioButton"; // plasmic-import: q8KiGKYxJ5Vn/component
import { useScreenVariants as useScreenVariants_7MCivF4FUjWx } from "./PlasmicGlobalVariant__UnnamedGroup"; // plasmic-import: 7mCivF4FUjWX/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: dCBp3p2g2cgYAgGFEQRPSF/projectcss
import sty from "./PlasmicRadioButtonGroup.module.css"; // plasmic-import: wYWrhsBd9p4L/css

createPlasmicElementProxy;

export const PlasmicRadioButtonGroup__VariantProps = new Array(
  "itemWidth",
  "radioStyle",
  "textAlign",
  "size",
  "layout",
  "secondLine"
);

export const PlasmicRadioButtonGroup__ArgProps = new Array(
  "groupName",
  "options",
  "currentOption",
  "onCurrentOptionChange",
  "highlightedOption",
  "highlightText",
  "columnCount",
  "gridItemMaxWidthPx",
  "showSecondLineText",
  "discountLabel"
);

const $$ = {};

function PlasmicRadioButtonGroup__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          groupName: true,
          highlightText: "Most Popular",
          columnCount: 1,
          showSecondLineText: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "currentOption",
        type: "writable",
        variableType: "text",
        valueProp: "currentOption",
        onChangeProp: "onCurrentOptionChange"
      },
      {
        path: "itemWidth",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.itemWidth
      },
      {
        path: "radioStyle",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.radioStyle
      },
      {
        path: "textAlign",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.textAlign
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "layout",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.layout
      },
      {
        path: "secondLine",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.secondLine
      },
      {
        path: "radioButton[].radioStyle",
        type: "private",
        variableType: "text"
      },
      {
        path: "radioButton[].showDiscountLine",
        type: "private",
        variableType: "boolean"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    unnamedGroup: useScreenVariants_7MCivF4FUjWx()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootitemWidth_hugItemWidth]: hasVariant(
            $state,
            "itemWidth",
            "hugItemWidth"
          ),
          [sty.rootitemWidth_stretchItemToFill]: hasVariant(
            $state,
            "itemWidth",
            "stretchItemToFill"
          ),
          [sty.rootlayout_columns]: hasVariant($state, "layout", "columns"),
          [sty.rootlayout_grid]: hasVariant($state, "layout", "grid"),
          [sty.rootradioStyle_discount]: hasVariant(
            $state,
            "radioStyle",
            "discount"
          ),
          [sty.rootradioStyle_outlined]: hasVariant(
            $state,
            "radioStyle",
            "outlined"
          ),
          [sty.rootsecondLine]: hasVariant($state, "secondLine", "secondLine"),
          [sty.rootsize_small]: hasVariant($state, "size", "small"),
          [sty.roottextAlign_left]: hasVariant($state, "textAlign", "left")
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxitemWidth_hugItemWidth]: hasVariant(
            $state,
            "itemWidth",
            "hugItemWidth"
          ),
          [sty.freeBoxitemWidth_stretchItemToFill]: hasVariant(
            $state,
            "itemWidth",
            "stretchItemToFill"
          ),
          [sty.freeBoxlayout_columns]: hasVariant($state, "layout", "columns"),
          [sty.freeBoxlayout_grid]: hasVariant($state, "layout", "grid"),
          [sty.freeBoxradioStyle_discount]: hasVariant(
            $state,
            "radioStyle",
            "discount"
          ),
          [sty.freeBoxradioStyle_outlined]: hasVariant(
            $state,
            "radioStyle",
            "outlined"
          ),
          [sty.freeBoxsize__default]: hasVariant($state, "size", "_default"),
          [sty.freeBoxtextAlign_center]: hasVariant(
            $state,
            "textAlign",
            "center"
          ),
          [sty.freeBoxtextAlign_left]: hasVariant($state, "textAlign", "left")
        })}
        style={
          hasVariant($state, "layout", "grid") &&
          hasVariant(globalVariants, "unnamedGroup", "mobileOnly")
            ? (() => {
                try {
                  return {
                    display: "grid",
                    "grid-template-columns":
                      "repeat(auto-fit, minmax(" +
                      $props.gridItemMaxWidthPx +
                      "px, 1fr))",
                    gap: "16px 16px"
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      display: "grid",
                      "grid-template-columns":
                        "repeat(auto-fill, minmax(200px, 1fr))",
                      gap: "16px 16px"
                    };
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "layout", "grid")
            ? (() => {
                try {
                  return {
                    display: "grid",
                    "grid-template-columns":
                      "repeat(auto-fill, minmax(" +
                      $props.gridItemMaxWidthPx +
                      "px, 1fr))",
                    gap: "16px 16px"
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      display: "grid",
                      "grid-template-columns":
                        "repeat(auto-fill, minmax(200px, 1fr))",
                      gap: "16px 16px"
                    };
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "layout", "columns")
            ? (() => {
                try {
                  return {
                    display: "block",
                    "column-gap": "44px",
                    columns: $props.columnCount
                  };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : { "column-gap": "16px" }
        }
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $props.options;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (() => {
            const child$Props = {
              checked: (() => {
                try {
                  return currentItem.value == $state.currentOption;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "checked";
                  }
                  throw e;
                }
              })(),
              className: classNames("__wab_instance", sty.radioButton, {
                [sty.radioButtonitemWidth_hugItemWidth]: hasVariant(
                  $state,
                  "itemWidth",
                  "hugItemWidth"
                ),
                [sty.radioButtonitemWidth_stretchItemToFill]: hasVariant(
                  $state,
                  "itemWidth",
                  "stretchItemToFill"
                ),
                [sty.radioButtonlayout_columns]: hasVariant(
                  $state,
                  "layout",
                  "columns"
                ),
                [sty.radioButtonlayout_grid]: hasVariant(
                  $state,
                  "layout",
                  "grid"
                ),
                [sty.radioButtonradioStyle_discount]: hasVariant(
                  $state,
                  "radioStyle",
                  "discount"
                ),
                [sty.radioButtonradioStyle_outlined]: hasVariant(
                  $state,
                  "radioStyle",
                  "outlined"
                ),
                [sty.radioButtonsecondLine]: hasVariant(
                  $state,
                  "secondLine",
                  "secondLine"
                ),
                [sty.radioButtonsize_small]: hasVariant(
                  $state,
                  "size",
                  "small"
                ),
                [sty.radioButtontextAlign_left]: hasVariant(
                  $state,
                  "textAlign",
                  "left"
                )
              }),
              discountLabel: (() => {
                try {
                  return currentItem.discountLabel;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })(),
              groupName: (() => {
                try {
                  return $props.groupName;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })(),
              highlightText: args.highlightText,
              highlighted: hasVariant($state, "radioStyle", "discount")
                ? (() => {
                    try {
                      return (
                        $props.highlightedOption &&
                        currentItem.value == $props.highlightedOption
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return (
                        $props.highlightedOption &&
                        currentItem.value == $props.highlightedOption
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })(),
              id: (() => {
                try {
                  return $props.groupName + "-" + currentItem.id;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })(),
              key: currentIndex,
              label: (() => {
                try {
                  return currentItem.label;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })(),
              layout: hasVariant($state, "itemWidth", "stretchItemToFill")
                ? "stretch"
                : undefined,
              onOptionChange: async event => {
                const $steps = {};
                $steps["updateCurrentOption"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["currentOption"]
                        },
                        operation: 0,
                        value: event.currentTarget.value
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateCurrentOption"] != null &&
                  typeof $steps["updateCurrentOption"] === "object" &&
                  typeof $steps["updateCurrentOption"].then === "function"
                ) {
                  $steps["updateCurrentOption"] = await $steps[
                    "updateCurrentOption"
                  ];
                }
              },
              onRadioStyleChange: generateStateOnChangeProp($state, [
                "radioButton",
                __plasmic_idx_0,
                "radioStyle"
              ]),
              onShowDiscountLineChange: generateStateOnChangeProp($state, [
                "radioButton",
                __plasmic_idx_0,
                "showDiscountLine"
              ]),
              radioStyle: generateStateValueProp($state, [
                "radioButton",
                __plasmic_idx_0,
                "radioStyle"
              ]),
              secondLine: hasVariant($state, "secondLine", "secondLine")
                ? true
                : (() => {
                    try {
                      return $props.showSecondLineText;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "secondLine";
                      }
                      throw e;
                    }
                  })(),
              secondLineText: hasVariant($state, "secondLine", "secondLine")
                ? (() => {
                    try {
                      return currentItem.secondLine;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return currentItem.secondLine;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })(),
              showDiscountLine: generateStateValueProp($state, [
                "radioButton",
                __plasmic_idx_0,
                "showDiscountLine"
              ]),
              size: hasVariant($state, "size", "small")
                ? "small"
                : hasVariant(globalVariants, "unnamedGroup", "mobileOnly")
                ? "_default"
                : undefined,
              textAlign: hasVariant($state, "textAlign", "left")
                ? "left"
                : undefined,
              value: (() => {
                try {
                  return currentItem.value;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            };
            initializePlasmicStates(
              $state,
              [
                {
                  name: "radioButton[].radioStyle",
                  initFunc: ({ $props, $state, $queries }) =>
                    hasVariant($state, "radioStyle", "discount")
                      ? (() => {
                          try {
                            return currentItem.discount ? "discount" : "";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      : hasVariant($state, "radioStyle", "outlined")
                      ? "outlined"
                      : "discountLine2"
                },
                {
                  name: "radioButton[].showDiscountLine",
                  initFunc: ({ $props, $state, $queries }) => false
                }
              ],

              [__plasmic_idx_0]
            );
            return (
              <RadioButton
                data-plasmic-name={"radioButton"}
                data-plasmic-override={overrides.radioButton}
                {...child$Props}
              />
            );
          })();
        })}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "radioButton"],
  freeBox: ["freeBox", "radioButton"],
  radioButton: ["radioButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRadioButtonGroup__ArgProps,
          internalVariantPropNames: PlasmicRadioButtonGroup__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRadioButtonGroup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRadioButtonGroup";
  } else {
    func.displayName = `PlasmicRadioButtonGroup.${nodeName}`;
  }
  return func;
}

export const PlasmicRadioButtonGroup = Object.assign(
  // Top-level PlasmicRadioButtonGroup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    radioButton: makeNodeComponent("radioButton"),
    // Metadata about props expected for PlasmicRadioButtonGroup
    internalVariantProps: PlasmicRadioButtonGroup__VariantProps,
    internalArgProps: PlasmicRadioButtonGroup__ArgProps
  }
);

export default PlasmicRadioButtonGroup;
/* prettier-ignore-end */
