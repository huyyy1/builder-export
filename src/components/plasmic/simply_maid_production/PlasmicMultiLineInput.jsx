// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dCBp3p2g2cgYAgGFEQRPSF
// Component: 1mS9GP8-dLkB
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: dCBp3p2g2cgYAgGFEQRPSF/projectcss
import sty from "./PlasmicMultiLineInput.module.css"; // plasmic-import: 1mS9GP8-dLkB/css
import SmEditIcon from "./icons/PlasmicIcon__SmEdit"; // plasmic-import: A6q6QqqNRN_J/icon

createPlasmicElementProxy;

export const PlasmicMultiLineInput__VariantProps = new Array();

export const PlasmicMultiLineInput__ArgProps = new Array(
  "placeholder",
  "value",
  "disabled",
  "rows"
);

const $$ = {};

function PlasmicMultiLineInput__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          disabled: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textarea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props["value"]
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {(() => {
          try {
            return $props.placeholder || !$props.placeholder == "";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <SmEditIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        ) : null}
        <textarea
          data-plasmic-name={"textarea"}
          data-plasmic-override={overrides.textarea}
          className={classNames(
            projectcss.all,
            projectcss.textarea,
            sty.textarea
          )}
          disabled={args.disabled}
          onChange={e => {
            generateStateOnChangeProp($state, ["textarea", "value"])(
              e.target.value
            );
          }}
          placeholder={args.placeholder}
          ref={ref => {
            $refs["textarea"] = ref;
          }}
          rows={args.rows}
          value={generateStateValueProp($state, ["textarea", "value"]) ?? ""}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "svg", "textarea"],
  freeBox: ["freeBox", "svg", "textarea"],
  svg: ["svg"],
  textarea: ["textarea"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMultiLineInput__ArgProps,
          internalVariantPropNames: PlasmicMultiLineInput__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMultiLineInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMultiLineInput";
  } else {
    func.displayName = `PlasmicMultiLineInput.${nodeName}`;
  }
  return func;
}

export const PlasmicMultiLineInput = Object.assign(
  // Top-level PlasmicMultiLineInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),
    textarea: makeNodeComponent("textarea"),
    // Metadata about props expected for PlasmicMultiLineInput
    internalVariantProps: PlasmicMultiLineInput__VariantProps,
    internalArgProps: PlasmicMultiLineInput__ArgProps
  }
);

export default PlasmicMultiLineInput;
/* prettier-ignore-end */
