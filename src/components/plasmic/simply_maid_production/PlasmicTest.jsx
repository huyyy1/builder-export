// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dCBp3p2g2cgYAgGFEQRPSF
// Component: cS3Ead1VPUhB
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: dCBp3p2g2cgYAgGFEQRPSF/projectcss
import sty from "./PlasmicTest.module.css"; // plasmic-import: cS3Ead1VPUhB/css
import helpCircle4AUj1K5GKfIhp from "./images/helpCircle4.svg"; // plasmic-import: aUJ1k5gKfIhp/picture

createPlasmicElementProxy;

export const PlasmicTest__VariantProps = new Array();

export const PlasmicTest__ArgProps = new Array();

const $$ = {};

function PlasmicTest__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"textInput5"}
      data-plasmic-override={overrides.textInput5}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.textInput5
      )}
    >
      <div
        data-plasmic-name={"text3"}
        data-plasmic-override={overrides.text3}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text3)}
      >
        {"www.untitledui.com"}
      </div>
      <div
        data-plasmic-name={"helpIcon"}
        data-plasmic-override={overrides.helpIcon}
        className={classNames(projectcss.all, sty.helpIcon)}
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"16px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"16px"}
          loading={"lazy"}
          src={{
            src: helpCircle4AUj1K5GKfIhp,
            fullWidth: 16,
            fullHeight: 16,
            aspectRatio: 1
          }}
        />
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  textInput5: ["textInput5", "text3", "helpIcon", "img"],
  text3: ["text3"],
  helpIcon: ["helpIcon", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTest__ArgProps,
          internalVariantPropNames: PlasmicTest__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTest__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "textInput5") {
    func.displayName = "PlasmicTest";
  } else {
    func.displayName = `PlasmicTest.${nodeName}`;
  }
  return func;
}

export const PlasmicTest = Object.assign(
  // Top-level PlasmicTest renders the root element
  makeNodeComponent("textInput5"),
  {
    // Helper components rendering sub-elements
    text3: makeNodeComponent("text3"),
    helpIcon: makeNodeComponent("helpIcon"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicTest
    internalVariantProps: PlasmicTest__VariantProps,
    internalArgProps: PlasmicTest__ArgProps
  }
);

export default PlasmicTest;
/* prettier-ignore-end */
