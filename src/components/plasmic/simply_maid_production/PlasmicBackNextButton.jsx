// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dCBp3p2g2cgYAgGFEQRPSF
// Component: FHgCil1DG0js
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: dCBp3p2g2cgYAgGFEQRPSF/projectcss
import sty from "./PlasmicBackNextButton.module.css"; // plasmic-import: FHgCil1DG0js/css
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: Jwh863PbeSXI/icon
import Group2Icon from "./icons/PlasmicIcon__Group2"; // plasmic-import: SpIqlR6Mg9Wc/icon

createPlasmicElementProxy;

export const PlasmicBackNextButton__VariantProps = new Array("direction");

export const PlasmicBackNextButton__ArgProps = new Array("onClick");

const $$ = {};

function PlasmicBackNextButton__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "direction",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.direction
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      onClick={args.onClick}
    >
      <div
        data-plasmic-name={"arrowLeft2"}
        data-plasmic-override={overrides.arrowLeft2}
        className={classNames(projectcss.all, sty.arrowLeft2, {
          [sty.arrowLeft2direction_back]: hasVariant(
            $state,
            "direction",
            "back"
          )
        })}
      >
        <GroupIcon
          className={classNames(projectcss.all, sty.svg___2NhF, {
            [sty.svgdirection_back___2NhFBxk1S]: hasVariant(
              $state,
              "direction",
              "back"
            )
          })}
          role={"img"}
        />

        <Group2Icon
          className={classNames(projectcss.all, sty.svg__kyeI)}
          role={"img"}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "arrowLeft2"],
  arrowLeft2: ["arrowLeft2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBackNextButton__ArgProps,
          internalVariantPropNames: PlasmicBackNextButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBackNextButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBackNextButton";
  } else {
    func.displayName = `PlasmicBackNextButton.${nodeName}`;
  }
  return func;
}

export const PlasmicBackNextButton = Object.assign(
  // Top-level PlasmicBackNextButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    arrowLeft2: makeNodeComponent("arrowLeft2"),
    // Metadata about props expected for PlasmicBackNextButton
    internalVariantProps: PlasmicBackNextButton__VariantProps,
    internalArgProps: PlasmicBackNextButton__ArgProps
  }
);

export default PlasmicBackNextButton;
/* prettier-ignore-end */
