// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dCBp3p2g2cgYAgGFEQRPSF
// Component: q8KiGKYxJ5Vn
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariants_7MCivF4FUjWx } from "./PlasmicGlobalVariant__UnnamedGroup"; // plasmic-import: 7mCivF4FUjWX/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: dCBp3p2g2cgYAgGFEQRPSF/projectcss
import sty from "./PlasmicRadioButton.module.css"; // plasmic-import: q8KiGKYxJ5Vn/css
import SmDiscountIcon from "./icons/PlasmicIcon__SmDiscount"; // plasmic-import: tP2ETHn3kM1Q/icon

createPlasmicElementProxy;

export const PlasmicRadioButton__VariantProps = new Array(
  "checked",
  "layout",
  "radioStyle",
  "highlighted",
  "textAlign",
  "size",
  "secondLine"
);

export const PlasmicRadioButton__ArgProps = new Array(
  "groupName",
  "value",
  "label",
  "id",
  "onOptionChange",
  "onRadioStyleChange",
  "highlightText",
  "secondLineText",
  "showDiscountLine",
  "onShowDiscountLineChange",
  "discountLabel"
);

const $$ = {};

function PlasmicRadioButton__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          value: ``,
          discountLabel: "0%"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "checked",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.checked
      },
      {
        path: "layout",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.layout
      },
      {
        path: "radioStyle",
        type: "writable",
        variableType: "variant",
        valueProp: "radioStyle",
        onChangeProp: "onRadioStyleChange"
      },
      {
        path: "highlighted",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.highlighted
      },
      {
        path: "textAlign",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.textAlign
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "secondLine",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.secondLine
      },
      {
        path: "showDiscountLine",
        type: "writable",
        variableType: "boolean",
        valueProp: "showDiscountLine",
        onChangeProp: "onShowDiscountLineChange"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    unnamedGroup: useScreenVariants_7MCivF4FUjWx()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootchecked]: hasVariant($state, "checked", "checked"),
          [sty.roothighlighted]: hasVariant(
            $state,
            "highlighted",
            "highlighted"
          ),
          [sty.rootlayout_stretch]: hasVariant($state, "layout", "stretch"),
          [sty.rootradioStyle_discountLine2]: hasVariant(
            $state,
            "radioStyle",
            "discountLine2"
          ),
          [sty.rootradioStyle_discount]: hasVariant(
            $state,
            "radioStyle",
            "discount"
          ),
          [sty.rootsecondLine]: hasVariant($state, "secondLine", "secondLine"),
          [sty.rootsize__default]: hasVariant($state, "size", "_default"),
          [sty.rootsize_small]: hasVariant($state, "size", "small"),
          [sty.roottextAlign_center]: hasVariant($state, "textAlign", "center"),
          [sty.roottextAlign_left]: hasVariant($state, "textAlign", "left")
        }
      )}
      style={{
        "-webkit-column-break-inside": "avoid",
        "page-break-inside": "avoid",
        "break-inside": "avoid"
      }}
    >
      <input
        data-plasmic-name={"radioPrimitive"}
        data-plasmic-override={overrides.radioPrimitive}
        className={classNames(
          projectcss.all,
          projectcss.input,
          sty.radioPrimitive,
          "radio-input",
          {
            [sty.radioPrimitivechecked]: hasVariant(
              $state,
              "checked",
              "checked"
            )
          }
        )}
        id={args.id}
        name={args.groupName}
        onChange={args.onOptionChange}
        ref={ref => {
          $refs["radioPrimitive"] = ref;
        }}
        type={(() => {
          try {
            return "radio";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "text";
            }
            throw e;
          }
        })()}
        value={args.value}
      />

      <div
        data-plasmic-name={"highlightBadge"}
        data-plasmic-override={overrides.highlightBadge}
        className={classNames(projectcss.all, sty.highlightBadge, {
          [sty.highlightBadgehighlighted]: hasVariant(
            $state,
            "highlighted",
            "highlighted"
          )
        })}
      >
        <div
          data-plasmic-name={"highlightText2"}
          data-plasmic-override={overrides.highlightText2}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.highlightText2,
            {
              [sty.highlightText2highlighted]: hasVariant(
                $state,
                "highlighted",
                "highlighted"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.highlightText;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__mkFhy, {
          [sty.freeBoxsecondLine__mkFhywlRvf]: hasVariant(
            $state,
            "secondLine",
            "secondLine"
          )
        })}
      >
        <label
          data-plasmic-name={"radioLabel"}
          data-plasmic-override={overrides.radioLabel}
          className={classNames(projectcss.all, sty.radioLabel, ``, {
            [sty.radioLabelchecked]: hasVariant($state, "checked", "checked"),
            [sty.radioLabelchecked_radioStyle_outlined]:
              hasVariant($state, "checked", "checked") &&
              hasVariant($state, "radioStyle", "outlined"),
            [sty.radioLabelhighlighted]: hasVariant(
              $state,
              "highlighted",
              "highlighted"
            ),
            [sty.radioLabellayout_hug]: hasVariant($state, "layout", "hug"),
            [sty.radioLabellayout_stretch]: hasVariant(
              $state,
              "layout",
              "stretch"
            ),
            [sty.radioLabelradioStyle_discountLine2]: hasVariant(
              $state,
              "radioStyle",
              "discountLine2"
            ),
            [sty.radioLabelradioStyle_discount]: hasVariant(
              $state,
              "radioStyle",
              "discount"
            ),
            [sty.radioLabelradioStyle_discount_checked]:
              hasVariant($state, "checked", "checked") &&
              hasVariant($state, "radioStyle", "discount"),
            [sty.radioLabelradioStyle_discount_layout_stretch]:
              hasVariant($state, "layout", "stretch") &&
              hasVariant($state, "radioStyle", "discount"),
            [sty.radioLabelradioStyle_outlined]: hasVariant(
              $state,
              "radioStyle",
              "outlined"
            ),
            [sty.radioLabelsecondLine]: hasVariant(
              $state,
              "secondLine",
              "secondLine"
            ),
            [sty.radioLabelsize__default]: hasVariant(
              $state,
              "size",
              "_default"
            ),
            [sty.radioLabelsize_small]: hasVariant($state, "size", "small"),
            [sty.radioLabeltextAlign_left]: hasVariant(
              $state,
              "textAlign",
              "left"
            )
          })}
          for={(() => {
            try {
              return $props.id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__nmdRx, {
              [sty.freeBoxchecked__nmdRxF1Xd]: hasVariant(
                $state,
                "checked",
                "checked"
              ),
              [sty.freeBoxlayout_stretch__nmdRxq0Zpc]: hasVariant(
                $state,
                "layout",
                "stretch"
              ),
              [sty.freeBoxradioStyle_discount__nmdRxAs7Zk]: hasVariant(
                $state,
                "radioStyle",
                "discount"
              ),
              [sty.freeBoxradioStyle_discount_checked__nmdRxAs7ZkF1Xd]:
                hasVariant($state, "checked", "checked") &&
                hasVariant($state, "radioStyle", "discount"),
              [sty.freeBoxsecondLine__nmdRxwlRvf]: hasVariant(
                $state,
                "secondLine",
                "secondLine"
              ),
              [sty.freeBoxtextAlign_left__nmdRxOtpEa]: hasVariant(
                $state,
                "textAlign",
                "left"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___5G0VF,
                {
                  [sty.textchecked___5G0VFf1Xd]: hasVariant(
                    $state,
                    "checked",
                    "checked"
                  ),
                  [sty.texthighlighted___5G0VFLdcnX]: hasVariant(
                    $state,
                    "highlighted",
                    "highlighted"
                  ),
                  [sty.textlayout_hug___5G0VFv7Yeh]: hasVariant(
                    $state,
                    "layout",
                    "hug"
                  ),
                  [sty.textlayout_stretch___5G0VFq0Zpc]: hasVariant(
                    $state,
                    "layout",
                    "stretch"
                  ),
                  [sty.textradioStyle_discountLine2___5G0VFa0Zmy]: hasVariant(
                    $state,
                    "radioStyle",
                    "discountLine2"
                  ),
                  [sty.textradioStyle_discount___5G0VFAs7Zk]: hasVariant(
                    $state,
                    "radioStyle",
                    "discount"
                  ),
                  [sty.textradioStyle_discount_checked___5G0VFAs7ZkF1Xd]:
                    hasVariant($state, "checked", "checked") &&
                    hasVariant($state, "radioStyle", "discount"),
                  [sty.textradioStyle_discount_layout_stretch___5G0VFAs7ZkQ0Zpc]:
                    hasVariant($state, "layout", "stretch") &&
                    hasVariant($state, "radioStyle", "discount"),
                  [sty.textradioStyle_outlined___5G0VFycqtX]: hasVariant(
                    $state,
                    "radioStyle",
                    "outlined"
                  ),
                  [sty.textsecondLine___5G0VFwlRvf]: hasVariant(
                    $state,
                    "secondLine",
                    "secondLine"
                  ),
                  [sty.textsize_small___5G0VFgP0X0]: hasVariant(
                    $state,
                    "size",
                    "small"
                  ),
                  [sty.texttextAlign_center___5G0VFFjJlY]: hasVariant(
                    $state,
                    "textAlign",
                    "center"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.label;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Label";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </label>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__gxpoj,
            {
              [sty.textsecondLine__gxpojwlRvf]: hasVariant(
                $state,
                "secondLine",
                "secondLine"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.secondLineText;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </Stack__>
      {(
        hasVariant($state, "secondLine", "secondLine")
          ? true
          : hasVariant($state, "radioStyle", "discountLine2")
          ? true
          : hasVariant($state, "radioStyle", "discount")
          ? (() => {
              try {
                return $props.groupName === "frequency";
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
          : true
      ) ? (
        <div
          data-plasmic-name={"discountBlock"}
          data-plasmic-override={overrides.discountBlock}
          className={classNames(projectcss.all, sty.discountBlock, {
            [sty.discountBlockradioStyle_discountLine2]: hasVariant(
              $state,
              "radioStyle",
              "discountLine2"
            ),
            [sty.discountBlockradioStyle_discount]: hasVariant(
              $state,
              "radioStyle",
              "discount"
            ),
            [sty.discountBlocksecondLine]: hasVariant(
              $state,
              "secondLine",
              "secondLine"
            )
          })}
        >
          {(
            hasVariant($state, "radioStyle", "discountLine2")
              ? true
              : hasVariant($state, "radioStyle", "discount")
              ? (() => {
                  try {
                    return $props.groupName === "frequency";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return $props.value === "fetchrecurring"
                      ? $state.discount_pricing <= 0
                      : false;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <SmDiscountIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg, {
                [sty.svgradioStyle_discountLine2]: hasVariant(
                  $state,
                  "radioStyle",
                  "discountLine2"
                ),
                [sty.svgradioStyle_discount]: hasVariant(
                  $state,
                  "radioStyle",
                  "discount"
                )
              })}
              role={"img"}
            />
          ) : null}
          {(
            hasVariant($state, "radioStyle", "discount")
              ? (() => {
                  try {
                    return $props.groupName === "frequency";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
              : true
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___79TbV,
                {
                  [sty.textradioStyle_discountLine2___79TbVa0Zmy]: hasVariant(
                    $state,
                    "radioStyle",
                    "discountLine2"
                  ),
                  [sty.textradioStyle_discount___79TbVAs7Zk]: hasVariant(
                    $state,
                    "radioStyle",
                    "discount"
                  )
                }
              )}
            >
              {hasVariant($state, "radioStyle", "discount") ? (
                <React.Fragment>
                  {(() => {
                    try {
                      return undefined;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "0%";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              ) : (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.discountLabel;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "0%";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              )}
            </div>
          ) : null}
        </div>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "radioPrimitive",
    "highlightBadge",
    "highlightText2",
    "radioLabel",
    "discountBlock",
    "svg"
  ],

  radioPrimitive: ["radioPrimitive"],
  highlightBadge: ["highlightBadge", "highlightText2"],
  highlightText2: ["highlightText2"],
  radioLabel: ["radioLabel"],
  discountBlock: ["discountBlock", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRadioButton__ArgProps,
          internalVariantPropNames: PlasmicRadioButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRadioButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRadioButton";
  } else {
    func.displayName = `PlasmicRadioButton.${nodeName}`;
  }
  return func;
}

export const PlasmicRadioButton = Object.assign(
  // Top-level PlasmicRadioButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    radioPrimitive: makeNodeComponent("radioPrimitive"),
    highlightBadge: makeNodeComponent("highlightBadge"),
    highlightText2: makeNodeComponent("highlightText2"),
    radioLabel: makeNodeComponent("radioLabel"),
    discountBlock: makeNodeComponent("discountBlock"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicRadioButton
    internalVariantProps: PlasmicRadioButton__VariantProps,
    internalArgProps: PlasmicRadioButton__ArgProps
  }
);

export default PlasmicRadioButton;
/* prettier-ignore-end */
