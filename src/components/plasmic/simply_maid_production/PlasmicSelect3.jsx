// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dCBp3p2g2cgYAgGFEQRPSF
// Component: 2dFi4HHqRw0x
import * as React from "react";
import {
  PlasmicLink as PlasmicLink__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import { DataProvider } from "@plasmicpkgs/plasmic-basic-components";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdPassword } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdPassword_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: dCBp3p2g2cgYAgGFEQRPSF/projectcss
import sty from "./PlasmicSelect3.module.css"; // plasmic-import: 2dFi4HHqRw0x/css

createPlasmicElementProxy;

export const PlasmicSelect3__VariantProps = new Array();

export const PlasmicSelect3__ArgProps = new Array();

const $$ = {};

function PlasmicSelect3__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "passwordInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdPassword_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <DataProvider
        data-plasmic-name={"dataProvider"}
        data-plasmic-override={overrides.dataProvider}
        className={classNames("__wab_instance", sty.dataProvider)}
        data={[
          {
            name: "Fill Murray",
            birthYear: 1950,
            profilePicture: ["https://www.fillmurray.com/200/300"]
          },
          {
            name: "Place Cage",
            birthYear: 1950,
            profilePicture: ["https://www.placecage.com/200/300"]
          }
        ]}
        name={"celebrities"}
      >
        <DataCtxReader__>
          {$ctx => (
            <li
              data-plasmic-name={"li"}
              data-plasmic-override={overrides.li}
              className={classNames(projectcss.all, projectcss.li, sty.li)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__rjQ4Z)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6FD3K
                  )}
                >
                  {"Enter some text"}
                </div>
              </div>
            </li>
          )}
        </DataCtxReader__>
      </DataProvider>
      <PlasmicLink__
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(
          projectcss.all,
          projectcss.a,
          projectcss.__wab_text,
          sty.link
        )}
        href={"https://www.plasmic.app/"}
        platform={"react"}
      >
        {"Some link text"}
      </PlasmicLink__>
      <AntdRadioGroup
        data-plasmic-name={"radioGroup"}
        data-plasmic-override={overrides.radioGroup}
        className={classNames("__wab_instance", sty.radioGroup)}
        onChange={generateStateOnChangeProp($state, ["radioGroup", "value"])}
        optionType={"button"}
        options={[
          { value: "option1", label: "Option 1" },
          { value: "option2", label: "Option 2" }
        ]}
        value={generateStateValueProp($state, ["radioGroup", "value"])}
      >
        <AntdRadio
          className={classNames("__wab_instance", sty.radio__bBbH)}
          value={"op1"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ydoCc
            )}
          >
            {"Option 1"}
          </div>
        </AntdRadio>
        <AntdRadio
          className={classNames("__wab_instance", sty.radio___7FTt1)}
          value={"op2"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qws7M
            )}
          >
            {"Option 2"}
          </div>
        </AntdRadio>
      </AntdRadioGroup>
      {(() => {
        const child$Props = {
          className: classNames("__wab_instance", sty.passwordInput),
          onChange: generateStateOnChangePropForCodeComponents(
            $state,
            "value",
            ["passwordInput", "value"],
            AntdPassword_Helpers
          ),
          value: generateStateValueProp($state, ["passwordInput", "value"])
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "value",
              plasmicStateName: "passwordInput.value"
            }
          ],

          [],
          AntdPassword_Helpers ?? {},
          child$Props
        );
        return (
          <AntdPassword
            data-plasmic-name={"passwordInput"}
            data-plasmic-override={overrides.passwordInput}
            {...child$Props}
          />
        );
      })()}
      <div className={classNames(projectcss.all, sty.freeBox___3PpB)} />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "dataProvider", "li", "link", "radioGroup", "passwordInput"],
  dataProvider: ["dataProvider", "li"],
  li: ["li"],
  link: ["link"],
  radioGroup: ["radioGroup"],
  passwordInput: ["passwordInput"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelect3__ArgProps,
          internalVariantPropNames: PlasmicSelect3__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelect3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelect3";
  } else {
    func.displayName = `PlasmicSelect3.${nodeName}`;
  }
  return func;
}

export const PlasmicSelect3 = Object.assign(
  // Top-level PlasmicSelect3 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dataProvider: makeNodeComponent("dataProvider"),
    li: makeNodeComponent("li"),
    link: makeNodeComponent("link"),
    radioGroup: makeNodeComponent("radioGroup"),
    passwordInput: makeNodeComponent("passwordInput"),
    // Metadata about props expected for PlasmicSelect3
    internalVariantProps: PlasmicSelect3__VariantProps,
    internalArgProps: PlasmicSelect3__ArgProps
  }
);

export default PlasmicSelect3;
/* prettier-ignore-end */
