// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dCBp3p2g2cgYAgGFEQRPSF
// Component: cUeoMv6kdg6G
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import SummaryCard from "../../SummaryCard"; // plasmic-import: KBsl1BV-ZLdj/component
import Subtotal from "../../Subtotal"; // plasmic-import: T99kbqJ6eYJm/component
import RadioButtonGroup from "../../RadioButtonGroup"; // plasmic-import: wYWrhsBd9p4L/component
import Button from "../../Button"; // plasmic-import: kE6qUVL-GGsA/component
import Selectgroup from "../../Selectgroup"; // plasmic-import: BDNlAi2c7YMM/component
import CalendarWidget from "../../CalendarWidget"; // plasmic-import: 6v7jVWeUBcyA/component
import TextInput from "../../TextInput"; // plasmic-import: l-dOtwLtehPY/component
import MultiLineInput from "../../MultiLineInput"; // plasmic-import: 1mS9GP8-dLkB/component
import { useScreenVariants as useScreenVariants_7MCivF4FUjWx } from "./PlasmicGlobalVariant__UnnamedGroup"; // plasmic-import: 7mCivF4FUjWX/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: dCBp3p2g2cgYAgGFEQRPSF/projectcss
import sty from "./PlasmicBooking.module.css"; // plasmic-import: cUeoMv6kdg6G/css
import SmLogoIcon from "./icons/PlasmicIcon__SmLogo"; // plasmic-import: Stn0LW0AGLHL/icon
import {
  addMinutes as __lib_dateFns__addMinutes,
  addHours as __lib_dateFns__addHours,
  format as __lib_dateFns__format
} from "date-fns";

createPlasmicElementProxy;

export const PlasmicBooking__VariantProps = new Array();

export const PlasmicBooking__ArgProps = new Array();

const $$ = {
  dateFns: {
    addMinutes: __lib_dateFns__addMinutes,
    addHours: __lib_dateFns__addHours,
    format: __lib_dateFns__format
  }
};

function PlasmicBooking__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "frequencyRadioGroup.currentOption",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.fetchRecurring.data.find(
                service => service.is_popular
              ).name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "cleanTypeRadioGroup.currentOption",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "standard"
      },
      {
        path: "bedroomsRadioGroup.currentOption",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1_bed"
      },
      {
        path: "bathroomsRadioGroup.currentOption",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1_bath"
      },
      {
        path: "getInRadioGroup.currentOption",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "petsRadioGroup.currentOption",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "zipInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "aptInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "streetInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "calendarWidget.selectedDate",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "timeRadioGroup.currentOption",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "currentFormPage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "price",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 100
      },
      {
        path: "subtotal.priceTotal",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => 100
      },
      {
        path: "selectGroup.selectgrouptotlaprice",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "selectGroup.variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "taxSummary",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "GST"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    fetchServices: usePlasmicDataOp(() => {
      return {
        sourceId: "wFZFyQSgUdiSc16WXN5y4y",
        opId: "c70b084b-69b3-4989-8bde-7fe73fe4ac5a",
        userArgs: {},
        cacheKey: `plasmic.$.c70b084b-69b3-4989-8bde-7fe73fe4ac5a.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    fetchPricing: usePlasmicDataOp(() => {
      return {
        sourceId: "wFZFyQSgUdiSc16WXN5y4y",
        opId: "28a52901-a42a-4300-9600-1582a3534083",
        userArgs: {},
        cacheKey: `plasmic.$.28a52901-a42a-4300-9600-1582a3534083.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    fetchRecurring: usePlasmicDataOp(() => {
      return {
        sourceId: "wFZFyQSgUdiSc16WXN5y4y",
        opId: "4bb28d20-bc0e-423a-bd20-76a40a3d5cac",
        userArgs: {},
        cacheKey: `plasmic.$.${(() => {
          try {
            return undefined;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.4bb28d20-bc0e-423a-bd20-76a40a3d5cac.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    fetchTaxes: usePlasmicDataOp(() => {
      return {
        sourceId: "wFZFyQSgUdiSc16WXN5y4y",
        opId: "24787eca-52bd-417e-bc6f-0a3d55a955a6",
        userArgs: {},
        cacheKey: `plasmic.$.24787eca-52bd-417e-bc6f-0a3d55a955a6.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    unnamedGroup: useScreenVariants_7MCivF4FUjWx()
  });
  return (
    <div
      data-plasmic-name={"booking"}
      data-plasmic-override={overrides.booking}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.booking
      )}
    >
      <div
        data-plasmic-name={"nav"}
        data-plasmic-override={overrides.nav}
        className={classNames(projectcss.all, sty.nav)}
      >
        <div
          data-plasmic-name={"navBar"}
          data-plasmic-override={overrides.navBar}
          className={classNames(projectcss.all, sty.navBar)}
        >
          <div
            data-plasmic-name={"selectCards"}
            data-plasmic-override={overrides.selectCards}
            className={classNames(projectcss.all, sty.selectCards)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__gd0Jp)}>
              <div
                data-plasmic-name={"logo"}
                data-plasmic-override={overrides.logo}
                className={classNames(projectcss.all, sty.logo)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__kAbEc)}>
                  <SmLogoIcon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                </div>
              </div>
              <div
                data-plasmic-name={"selections"}
                data-plasmic-override={overrides.selections}
                className={classNames(projectcss.all, sty.selections)}
              >
                {(() => {
                  try {
                    return $state.bedroomsRadioGroup.currentOption;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <SummaryCard
                    className={classNames(
                      "__wab_instance",
                      sty.summaryCard__lkenA
                    )}
                    onClick={async event => {
                      const $steps = {};
                      $steps["updateCurrentFormPage"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["currentFormPage"]
                              },
                              operation: 0,
                              value: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCurrentFormPage"] != null &&
                        typeof $steps["updateCurrentFormPage"] === "object" &&
                        typeof $steps["updateCurrentFormPage"].then ===
                          "function"
                      ) {
                        $steps["updateCurrentFormPage"] = await $steps[
                          "updateCurrentFormPage"
                        ];
                      }
                    }}
                    sumLabel={"BEDROOMS"}
                    sumValue={(() => {
                      try {
                        return (() => {
                          const selectedBedroomOption =
                            $queries.fetchPricing.data?.find(
                              item =>
                                item.group_display_name === "Bedroom" &&
                                item.option_name ===
                                  $state.bedroomsRadioGroup.currentOption
                            );
                          const bedroomDisplayName =
                            selectedBedroomOption?.display_name ?? null;
                          return bedroomDisplayName;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                ) : null}
                {(() => {
                  try {
                    return $state.bathroomsRadioGroup.currentOption;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <SummaryCard
                    className={classNames(
                      "__wab_instance",
                      sty.summaryCard___7NbDl
                    )}
                    onClick={async event => {
                      const $steps = {};
                      $steps["updateCurrentFormPage"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["currentFormPage"]
                              },
                              operation: 0,
                              value: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCurrentFormPage"] != null &&
                        typeof $steps["updateCurrentFormPage"] === "object" &&
                        typeof $steps["updateCurrentFormPage"].then ===
                          "function"
                      ) {
                        $steps["updateCurrentFormPage"] = await $steps[
                          "updateCurrentFormPage"
                        ];
                      }
                    }}
                    sumLabel={"BATHROOMS"}
                    sumValue={(() => {
                      try {
                        return (() => {
                          const selectedBathroomOption =
                            $queries.fetchPricing.data?.find(
                              item =>
                                item.group_display_name === "Bathroom" &&
                                item.option_name ===
                                  $state.bathroomsRadioGroup.currentOption
                            );
                          const bathroomDisplayName =
                            selectedBathroomOption?.display_name ?? null;
                          return bathroomDisplayName;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                ) : null}
                {(() => {
                  try {
                    return $state.cleanTypeRadioGroup.currentOption;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })() ? (
                  <SummaryCard
                    className={classNames(
                      "__wab_instance",
                      sty.summaryCard__h3OfF
                    )}
                    onClick={async event => {
                      const $steps = {};
                      $steps["updateCurrentFormPage"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["currentFormPage"]
                              },
                              operation: 0,
                              value: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCurrentFormPage"] != null &&
                        typeof $steps["updateCurrentFormPage"] === "object" &&
                        typeof $steps["updateCurrentFormPage"].then ===
                          "function"
                      ) {
                        $steps["updateCurrentFormPage"] = await $steps[
                          "updateCurrentFormPage"
                        ];
                      }
                    }}
                    sumLabel={(() => {
                      try {
                        return (() => {
                          const selectedService =
                            $queries.fetchServices.data?.find(
                              service =>
                                service.name ===
                                $state.cleanTypeRadioGroup.currentOption
                            );
                          return selectedService
                            ? selectedService.formatted_duration
                            : "ClEAN TYPE";
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    sumValue={(() => {
                      try {
                        return (() => {
                          const selectedService =
                            $queries.fetchServices.data?.find(
                              service =>
                                service.name ===
                                $state.cleanTypeRadioGroup.currentOption
                            );
                          return selectedService
                            ? selectedService.display_name
                            : "Other";
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                ) : null}
                {(() => {
                  try {
                    return $state.frequencyRadioGroup.currentOption;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <SummaryCard
                    className={classNames(
                      "__wab_instance",
                      sty.summaryCard__jZVd8
                    )}
                    onClick={async event => {
                      const $steps = {};
                      $steps["updateCurrentFormPage"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["currentFormPage"]
                              },
                              operation: 0,
                              value: 1
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCurrentFormPage"] != null &&
                        typeof $steps["updateCurrentFormPage"] === "object" &&
                        typeof $steps["updateCurrentFormPage"].then ===
                          "function"
                      ) {
                        $steps["updateCurrentFormPage"] = await $steps[
                          "updateCurrentFormPage"
                        ];
                      }
                    }}
                    sumLabel={(() => {
                      try {
                        return (() => {
                          const selectedFrequencyOption =
                            $queries.fetchRecurring.data?.find(
                              item =>
                                item.name ===
                                $state.frequencyRadioGroup.currentOption
                            );
                          const frequencyDiscount = selectedFrequencyOption
                            ? `${Math.round(
                                selectedFrequencyOption.discount_percentage
                              )}% OFF`
                            : null;
                          return frequencyDiscount;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    sumValue={(() => {
                      try {
                        return (() => {
                          const selectedFrequencyOption =
                            $queries.fetchRecurring.data?.find(
                              item =>
                                item.name ===
                                $state.frequencyRadioGroup.currentOption
                            );
                          const frequencyDisplayName =
                            selectedFrequencyOption?.display_name ?? null;
                          return frequencyDisplayName;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                ) : null}
                {(() => {
                  try {
                    return (
                      $state.calendarWidget.selectedDate instanceof Date &&
                      $state.timeRadioGroup.currentOption
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <SummaryCard
                    data-plasmic-name={"summaryCardDatetime"}
                    data-plasmic-override={overrides.summaryCardDatetime}
                    className={classNames(
                      "__wab_instance",
                      sty.summaryCardDatetime
                    )}
                    onClick={async event => {
                      const $steps = {};
                      $steps["updateCurrentFormPage"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["currentFormPage"]
                              },
                              operation: 0,
                              value: 3
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCurrentFormPage"] != null &&
                        typeof $steps["updateCurrentFormPage"] === "object" &&
                        typeof $steps["updateCurrentFormPage"].then ===
                          "function"
                      ) {
                        $steps["updateCurrentFormPage"] = await $steps[
                          "updateCurrentFormPage"
                        ];
                      }
                    }}
                    sumLabel={"DATE & TIME"}
                    sumValue={(() => {
                      try {
                        return (() => {
                          const splitAt = (index, xs) => [
                            xs.slice(0, index),
                            xs.slice(index)
                          ];

                          let timeStringArray = splitAt(
                            2,
                            $state.timeRadioGroup.currentOption
                          );
                          let timeIntArray = timeStringArray.map(function (
                            item
                          ) {
                            return parseInt(item, 10);
                          });
                          let dateTime = $$.dateFns.addMinutes(
                            $$.dateFns.addHours(
                              $state.calendarWidget.selectedDate,
                              timeIntArray[0]
                            ),
                            timeIntArray[1]
                          );
                          return $$.dateFns.format(
                            dateTime,
                            "MMM dd ~hh:mmaaa"
                          );
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                ) : null}
                {(() => {
                  try {
                    return $state.streetInput.value && $state.zipInput.value;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <SummaryCard
                    data-plasmic-name={"summaryCardAddress"}
                    data-plasmic-override={overrides.summaryCardAddress}
                    className={classNames(
                      "__wab_instance",
                      sty.summaryCardAddress
                    )}
                    onClick={async event => {
                      const $steps = {};
                      $steps["updateCurrentFormPage"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["currentFormPage"]
                              },
                              operation: 0,
                              value: 4
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCurrentFormPage"] != null &&
                        typeof $steps["updateCurrentFormPage"] === "object" &&
                        typeof $steps["updateCurrentFormPage"].then ===
                          "function"
                      ) {
                        $steps["updateCurrentFormPage"] = await $steps[
                          "updateCurrentFormPage"
                        ];
                      }
                    }}
                    sumLabel={"ADDRESS"}
                    sumValue={(() => {
                      try {
                        return $state.streetInput.value;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                ) : null}
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__zii3E)}
              style={
                hasVariant(globalVariants, "unnamedGroup", "mobileOnly")
                  ? (() => {
                      try {
                        return {
                          width: ($state.currentFormPage / 4) * 100 + "%"
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  : undefined
              }
            />
          </div>
          {(
            hasVariant(globalVariants, "unnamedGroup", "mobileOnly")
              ? true
              : (() => {
                  try {
                    return $state.streetInput.value && $state.zipInput.value;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <div
              data-plasmic-name={"finalRule"}
              data-plasmic-override={overrides.finalRule}
              className={classNames(projectcss.all, sty.finalRule)}
            />
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__gUUdk)}>
            <Subtotal
              data-plasmic-name={"subtotal"}
              data-plasmic-override={overrides.subtotal}
              className={classNames("__wab_instance", sty.subtotal)}
              navtotal={"100"}
              onPriceTotalChange={generateStateOnChangeProp($state, [
                "subtotal",
                "priceTotal"
              ])}
              priceTotal={generateStateValueProp($state, [
                "subtotal",
                "priceTotal"
              ])}
            />

            {(() => {
              try {
                return $state.currentFormPage < 5;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                data-plasmic-name={"billingRule2"}
                data-plasmic-override={overrides.billingRule2}
                className={classNames(projectcss.all, sty.billingRule2)}
              />
            ) : null}
            {(() => {
              try {
                return $state.currentFormPage == 5;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                data-plasmic-name={"billingRule"}
                data-plasmic-override={overrides.billingRule}
                className={classNames(projectcss.all, sty.billingRule)}
              />
            ) : null}
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__zV5VT)} />
      </div>
      <div
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section)}
      >
        <Stack__
          as={"form"}
          data-plasmic-name={"bookingForm"}
          data-plasmic-override={overrides.bookingForm}
          hasGap={true}
          className={classNames(projectcss.all, sty.bookingForm)}
        >
          {(() => {
            try {
              return $state.currentFormPage === 1;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"serviceFormPage"}
              data-plasmic-override={overrides.serviceFormPage}
              hasGap={true}
              className={classNames(projectcss.all, sty.serviceFormPage)}
            >
              <h1
                data-plasmic-name={"title"}
                data-plasmic-override={overrides.title}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.title
                )}
              >
                {"Let's book your clean"}
              </h1>
              <Stack__
                as={"div"}
                data-plasmic-name={"cleanTypeBlock"}
                data-plasmic-override={overrides.cleanTypeBlock}
                hasGap={true}
                className={classNames(projectcss.all, sty.cleanTypeBlock)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uXwwJ
                  )}
                >
                  {"Select your clean type"}
                </div>
                <RadioButtonGroup
                  data-plasmic-name={"cleanTypeRadioGroup"}
                  data-plasmic-override={overrides.cleanTypeRadioGroup}
                  className={classNames(
                    "__wab_instance",
                    sty.cleanTypeRadioGroup
                  )}
                  columnCount={(() => {
                    try {
                      return $queries.fetchServices.data.length;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 3;
                      }
                      throw e;
                    }
                  })()}
                  currentOption={generateStateValueProp($state, [
                    "cleanTypeRadioGroup",
                    "currentOption"
                  ])}
                  gridItemMaxWidthPx={
                    hasVariant(globalVariants, "unnamedGroup", "mobileOnly")
                      ? 100
                      : undefined
                  }
                  groupName={"cleantype "}
                  itemWidth={"stretchItemToFill"}
                  layout={
                    hasVariant(globalVariants, "unnamedGroup", "mobileOnly")
                      ? "grid"
                      : undefined
                  }
                  onCurrentOptionChange={async (...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "cleanTypeRadioGroup",
                      "currentOption"
                    ]).apply(null, eventArgs);
                    (async val => {
                      const $steps = {};
                      $steps["cleantyupeUpdate"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: [
                                  "cleanTypeRadioGroup",
                                  "currentOption"
                                ]
                              },
                              operation: 0,
                              value: $state.cleanTypeRadioGroup.currentOption
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["cleantyupeUpdate"] != null &&
                        typeof $steps["cleantyupeUpdate"] === "object" &&
                        typeof $steps["cleantyupeUpdate"].then === "function"
                      ) {
                        $steps["cleantyupeUpdate"] = await $steps[
                          "cleantyupeUpdate"
                        ];
                      }
                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  const taxesAndSurcharges =
                                    $queries?.fetchTaxes?.data ?? [];
                                  const pricingData =
                                    $queries?.fetchPricing?.data ?? [];
                                  const recurringData =
                                    $queries?.fetchRecurring?.data ?? [];
                                  let gstRate = 0;
                                  let surchargeRate = 0;
                                  taxesAndSurcharges.forEach(item => {
                                    if (item.is_tax) {
                                      if (item.name.toLowerCase() === "gst") {
                                        gstRate = Number(item.rate) / 100;
                                      }
                                    } else {
                                      if (
                                        item.name.toLowerCase() === "surcharge"
                                      ) {
                                        surchargeRate = Number(item.rate) / 100;
                                      }
                                    }
                                  });
                                  if (!gstRate)
                                    console.warn(
                                      "No GST rate found in taxes and surcharges"
                                    );
                                  if (!surchargeRate)
                                    console.warn(
                                      "No surcharge rate found in taxes and surcharges"
                                    );
                                  const bathroomsOption =
                                    $state?.bathroomsRadioGroup?.currentOption;
                                  const bedroomsOption =
                                    $state?.bedroomsRadioGroup?.currentOption;
                                  const serviceName =
                                    $state?.cleanTypeRadioGroup?.currentOption;
                                  let price = 0;
                                  const bathroomsRadioGroupObject =
                                    pricingData.find(
                                      item =>
                                        item.option_name === bathroomsOption &&
                                        item.service_name === serviceName
                                    );
                                  const bedroomsRadioGroupObject =
                                    pricingData.find(
                                      item =>
                                        item.option_name === bedroomsOption &&
                                        item.service_name === serviceName
                                    );
                                  let bedroomPrice = bedroomsRadioGroupObject
                                    ? Number(
                                        bedroomsRadioGroupObject.option_price ||
                                          0
                                      )
                                    : 0;
                                  let bathroomPrice = bathroomsRadioGroupObject
                                    ? Number(
                                        bathroomsRadioGroupObject.option_price ||
                                          0
                                      )
                                    : 0;
                                  price = bedroomPrice + bathroomPrice;
                                  let gst = price * gstRate;
                                  let surcharge = price * surchargeRate;
                                  price = price + gst + surcharge;
                                  const frequencyOption =
                                    $state?.frequencyRadioGroup?.currentOption;
                                  const recurringDiscountObject =
                                    recurringData.find(
                                      item => item.value === frequencyOption
                                    );
                                  let discountPercentage =
                                    recurringDiscountObject
                                      ? Number(
                                          recurringDiscountObject.discount_percentage
                                        )
                                      : 0;
                                  let discountAmount =
                                    price * (discountPercentage / 100);
                                  price = price - discountAmount;
                                  price = Math.max(0, price);
                                  console.log("Bedroom Price: ", bedroomPrice);
                                  console.log(
                                    "Bathroom Price: ",
                                    bathroomPrice
                                  );
                                  console.log("GST: ", gst);
                                  console.log("Surcharge: ", surcharge);
                                  console.log(
                                    "Discount Percentage: ",
                                    discountPercentage
                                  );
                                  console.log(
                                    "Discount Amount: ",
                                    discountAmount
                                  );
                                  console.log("Total Final Price: ", price);
                                  return ($state.subtotal.priceTotal = Number(
                                    price.toFixed(2)
                                  ));
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }).apply(null, eventArgs);
                  }}
                  options={(() => {
                    try {
                      return (() => {
                        const options =
                          $queries.fetchServices.data?.map(service => ({
                            value: service.name,
                            id: service.id,
                            label: service.display_name,
                            secondLine: service.formatted_duration
                          })) ?? [];
                        return options;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [
                          { value: "1", id: "1", label: "1" },
                          { value: "2", id: "2", label: "2" },
                          { value: "3", id: "3", label: "3" },
                          { value: "4", id: "4", label: "4" },
                          { value: "5", id: "5", label: "5" },
                          { value: "6", id: "6", label: "6" }
                        ];
                      }
                      throw e;
                    }
                  })()}
                  showSecondLineText={true}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"bedroomBlock"}
                data-plasmic-override={overrides.bedroomBlock}
                hasGap={true}
                className={classNames(projectcss.all, sty.bedroomBlock)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nZ4Li
                  )}
                >
                  {"How many bedrooms?"}
                </div>
                <RadioButtonGroup
                  data-plasmic-name={"bedroomsRadioGroup"}
                  data-plasmic-override={overrides.bedroomsRadioGroup}
                  className={classNames(
                    "__wab_instance",
                    sty.bedroomsRadioGroup
                  )}
                  columnCount={2}
                  currentOption={generateStateValueProp($state, [
                    "bedroomsRadioGroup",
                    "currentOption"
                  ])}
                  groupName={"bedrooms"}
                  itemWidth={"stretchItemToFill"}
                  layout={undefined}
                  onCurrentOptionChange={async (...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "bedroomsRadioGroup",
                      "currentOption"
                    ]).apply(null, eventArgs);
                    (async val => {
                      const $steps = {};
                      $steps["updateBedroom"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: [
                                  "bedroomsRadioGroup",
                                  "currentOption"
                                ]
                              },
                              operation: 0,
                              value: $state.bedroomsRadioGroup.currentOption
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateBedroom"] != null &&
                        typeof $steps["updateBedroom"] === "object" &&
                        typeof $steps["updateBedroom"].then === "function"
                      ) {
                        $steps["updateBedroom"] = await $steps["updateBedroom"];
                      }
                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  const taxesAndSurcharges =
                                    $queries?.fetchTaxes?.data ?? [];
                                  const pricingData =
                                    $queries?.fetchPricing?.data ?? [];
                                  const recurringData =
                                    $queries?.fetchRecurring?.data ?? [];
                                  let gstRate = 0;
                                  let surchargeRate = 0;
                                  taxesAndSurcharges.forEach(item => {
                                    if (item.is_tax) {
                                      if (item.name.toLowerCase() === "gst") {
                                        gstRate = Number(item.rate) / 100;
                                      }
                                    } else {
                                      if (
                                        item.name.toLowerCase() === "surcharge"
                                      ) {
                                        surchargeRate = Number(item.rate) / 100;
                                      }
                                    }
                                  });
                                  if (!gstRate)
                                    console.warn(
                                      "No GST rate found in taxes and surcharges"
                                    );
                                  if (!surchargeRate)
                                    console.warn(
                                      "No surcharge rate found in taxes and surcharges"
                                    );
                                  const bathroomsOption =
                                    $state?.bathroomsRadioGroup?.currentOption;
                                  const bedroomsOption =
                                    $state?.bedroomsRadioGroup?.currentOption;
                                  const serviceName =
                                    $state?.cleanTypeRadioGroup?.currentOption;
                                  let price = 0;
                                  const bathroomsRadioGroupObject =
                                    pricingData.find(
                                      item =>
                                        item.option_name === bathroomsOption &&
                                        item.service_name === serviceName
                                    );
                                  const bedroomsRadioGroupObject =
                                    pricingData.find(
                                      item =>
                                        item.option_name === bedroomsOption &&
                                        item.service_name === serviceName
                                    );
                                  let bedroomPrice = bedroomsRadioGroupObject
                                    ? Number(
                                        bedroomsRadioGroupObject.option_price ||
                                          0
                                      )
                                    : 0;
                                  let bathroomPrice = bathroomsRadioGroupObject
                                    ? Number(
                                        bathroomsRadioGroupObject.option_price ||
                                          0
                                      )
                                    : 0;
                                  price = bedroomPrice + bathroomPrice;
                                  let gst = price * gstRate;
                                  let surcharge = price * surchargeRate;
                                  price = price + gst + surcharge;
                                  const frequencyOption =
                                    $state?.frequencyRadioGroup?.currentOption;
                                  const recurringDiscountObject =
                                    recurringData.find(
                                      item => item.value === frequencyOption
                                    );
                                  let discountPercentage =
                                    recurringDiscountObject
                                      ? Number(
                                          recurringDiscountObject.discount_percentage
                                        )
                                      : 0;
                                  let discountAmount =
                                    price * (discountPercentage / 100);
                                  price = price - discountAmount;
                                  price = Math.max(0, price);
                                  console.log("Bedroom Price: ", bedroomPrice);
                                  console.log(
                                    "Bathroom Price: ",
                                    bathroomPrice
                                  );
                                  console.log("GST: ", gst);
                                  console.log("Surcharge: ", surcharge);
                                  console.log(
                                    "Discount Percentage: ",
                                    discountPercentage
                                  );
                                  console.log(
                                    "Discount Amount: ",
                                    discountAmount
                                  );
                                  console.log("Total Final Price: ", price);
                                  return ($state.subtotal.priceTotal = Number(
                                    price.toFixed(2)
                                  ));
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }).apply(null, eventArgs);
                  }}
                  options={(() => {
                    try {
                      return (() => {
                        const bedroomOptions =
                          $queries.fetchPricing.data
                            ?.filter(
                              item =>
                                item.group_display_name === "Bedroom" &&
                                item.service_name ===
                                  $state.cleanTypeRadioGroup.currentOption
                            )
                            .map(option => ({
                              value: option.option_name,
                              id: option.option_id,
                              label: option.display_name
                            })) ?? [];
                        return bedroomOptions;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  showSecondLineText={true}
                  size={
                    hasVariant(globalVariants, "unnamedGroup", "mobileOnly")
                      ? "small"
                      : "small"
                  }
                  textAlign={"center"}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"bathroomBlock"}
                data-plasmic-override={overrides.bathroomBlock}
                hasGap={true}
                className={classNames(projectcss.all, sty.bathroomBlock)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xjPp9
                  )}
                >
                  {"How many bathrooms?"}
                </div>
                <RadioButtonGroup
                  data-plasmic-name={"bathroomsRadioGroup"}
                  data-plasmic-override={overrides.bathroomsRadioGroup}
                  className={classNames(
                    "__wab_instance",
                    sty.bathroomsRadioGroup
                  )}
                  columnCount={2}
                  currentOption={generateStateValueProp($state, [
                    "bathroomsRadioGroup",
                    "currentOption"
                  ])}
                  groupName={"bathrooms"}
                  itemWidth={
                    hasVariant(globalVariants, "unnamedGroup", "mobileOnly")
                      ? "stretchItemToFill"
                      : "stretchItemToFill"
                  }
                  layout={undefined}
                  onCurrentOptionChange={async (...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "bathroomsRadioGroup",
                      "currentOption"
                    ]).apply(null, eventArgs);
                    (async val => {
                      const $steps = {};
                      $steps["updateBathroomsRadioGroupCurrentOption"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: [
                                  "bathroomsRadioGroup",
                                  "currentOption"
                                ]
                              },
                              operation: 0,
                              value: $state.bathroomsRadioGroup.currentOption
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateBathroomsRadioGroupCurrentOption"] !=
                          null &&
                        typeof $steps[
                          "updateBathroomsRadioGroupCurrentOption"
                        ] === "object" &&
                        typeof $steps["updateBathroomsRadioGroupCurrentOption"]
                          .then === "function"
                      ) {
                        $steps["updateBathroomsRadioGroupCurrentOption"] =
                          await $steps[
                            "updateBathroomsRadioGroupCurrentOption"
                          ];
                      }
                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  const taxesAndSurcharges =
                                    $queries?.fetchTaxes?.data ?? [];
                                  const pricingData =
                                    $queries?.fetchPricing?.data ?? [];
                                  const recurringData =
                                    $queries?.fetchRecurring?.data ?? [];
                                  let gstRate = 0;
                                  let surchargeRate = 0;
                                  taxesAndSurcharges.forEach(item => {
                                    if (item.is_tax) {
                                      if (item.name.toLowerCase() === "gst") {
                                        gstRate = Number(item.rate) / 100;
                                      }
                                    } else {
                                      if (
                                        item.name.toLowerCase() === "surcharge"
                                      ) {
                                        surchargeRate = Number(item.rate) / 100;
                                      }
                                    }
                                  });
                                  if (!gstRate)
                                    console.warn(
                                      "No GST rate found in taxes and surcharges"
                                    );
                                  if (!surchargeRate)
                                    console.warn(
                                      "No surcharge rate found in taxes and surcharges"
                                    );
                                  const bathroomsOption =
                                    $state?.bathroomsRadioGroup?.currentOption;
                                  const bedroomsOption =
                                    $state?.bedroomsRadioGroup?.currentOption;
                                  const serviceName =
                                    $state?.cleanTypeRadioGroup?.currentOption;
                                  let price = 0;
                                  const bathroomsRadioGroupObject =
                                    pricingData.find(
                                      item =>
                                        item.option_name === bathroomsOption &&
                                        item.service_name === serviceName
                                    );
                                  const bedroomsRadioGroupObject =
                                    pricingData.find(
                                      item =>
                                        item.option_name === bedroomsOption &&
                                        item.service_name === serviceName
                                    );
                                  let bedroomPrice = bedroomsRadioGroupObject
                                    ? Number(
                                        bedroomsRadioGroupObject.option_price ||
                                          0
                                      )
                                    : 0;
                                  let bathroomPrice = bathroomsRadioGroupObject
                                    ? Number(
                                        bathroomsRadioGroupObject.option_price ||
                                          0
                                      )
                                    : 0;
                                  price = bedroomPrice + bathroomPrice;
                                  let gst = price * gstRate;
                                  let surcharge = price * surchargeRate;
                                  price = price + gst + surcharge;
                                  const frequencyOption =
                                    $state?.frequencyRadioGroup?.currentOption;
                                  const recurringDiscountObject =
                                    recurringData.find(
                                      item => item.value === frequencyOption
                                    );
                                  let discountPercentage =
                                    recurringDiscountObject
                                      ? Number(
                                          recurringDiscountObject.discount_percentage
                                        )
                                      : 0;
                                  let discountAmount =
                                    price * (discountPercentage / 100);
                                  price = price - discountAmount;
                                  price = Math.max(0, price);
                                  console.log("Bedroom Price: ", bedroomPrice);
                                  console.log(
                                    "Bathroom Price: ",
                                    bathroomPrice
                                  );
                                  console.log("GST: ", gst);
                                  console.log("Surcharge: ", surcharge);
                                  console.log(
                                    "Discount Percentage: ",
                                    discountPercentage
                                  );
                                  console.log(
                                    "Discount Amount: ",
                                    discountAmount
                                  );
                                  console.log("Total Final Price: ", price);
                                  return ($state.subtotal.priceTotal = Number(
                                    price.toFixed(2)
                                  ));
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }).apply(null, eventArgs);
                  }}
                  options={(() => {
                    try {
                      return (() => {
                        const bedroomOptions =
                          $queries.fetchPricing.data
                            ?.filter(
                              item =>
                                item.group_display_name === "Bathroom" &&
                                item.service_name ===
                                  $state.cleanTypeRadioGroup.currentOption
                            )
                            .map(option => ({
                              value: option.option_name,
                              id: option.option_id,
                              label: option.display_name
                            })) ?? [];
                        return bedroomOptions;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [
                          { value: "1", id: "1", label: "1" },
                          { value: "2", id: "2", label: "2" },
                          { value: "3", id: "3", label: "3" },
                          { value: "4", id: "4", label: "4" },
                          { value: "5", id: "5", label: "5" },
                          { value: "6", id: "6", label: "6" }
                        ];
                      }
                      throw e;
                    }
                  })()}
                  showSecondLineText={true}
                  size={
                    hasVariant(globalVariants, "unnamedGroup", "mobileOnly")
                      ? "small"
                      : "small"
                  }
                />
              </Stack__>
              {(() => {
                try {
                  return (() => {
                    const hasRecurringOptions =
                      $queries.fetchRecurring.data?.some(
                        item =>
                          item.service_name ===
                          $state.cleanTypeRadioGroup.currentOption
                      ) ?? false;
                    return hasRecurringOptions;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frequencyBlock"}
                  data-plasmic-override={overrides.frequencyBlock}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frequencyBlock)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qiJh0
                    )}
                  >
                    {"How often would you like your clean?"}
                  </div>
                  <RadioButtonGroup
                    data-plasmic-name={"frequencyRadioGroup"}
                    data-plasmic-override={overrides.frequencyRadioGroup}
                    className={classNames(
                      "__wab_instance",
                      sty.frequencyRadioGroup
                    )}
                    columnCount={2}
                    currentOption={generateStateValueProp($state, [
                      "frequencyRadioGroup",
                      "currentOption"
                    ])}
                    discountLabel={"2"}
                    gridItemMaxWidthPx={
                      hasVariant(globalVariants, "unnamedGroup", "mobileOnly")
                        ? 170
                        : undefined
                    }
                    groupName={"frequency"}
                    highlightedOption={(() => {
                      try {
                        return $queries.fetchRecurring.data.find(
                          service => service.is_popular
                        ).name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    itemWidth={"stretchItemToFill"}
                    layout={
                      hasVariant(globalVariants, "unnamedGroup", "mobileOnly")
                        ? "grid"
                        : undefined
                    }
                    onCurrentOptionChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "frequencyRadioGroup",
                        "currentOption"
                      ]).apply(null, eventArgs);
                      (async val => {
                        const $steps = {};
                        $steps["updateFrequencyRadioGroupCurrentOption"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: [
                                    "frequencyRadioGroup",
                                    "currentOption"
                                  ]
                                },
                                operation: 0,
                                value: $state.frequencyRadioGroup.currentOption
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;
                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateFrequencyRadioGroupCurrentOption"] !=
                            null &&
                          typeof $steps[
                            "updateFrequencyRadioGroupCurrentOption"
                          ] === "object" &&
                          typeof $steps[
                            "updateFrequencyRadioGroupCurrentOption"
                          ].then === "function"
                        ) {
                          $steps["updateFrequencyRadioGroupCurrentOption"] =
                            await $steps[
                              "updateFrequencyRadioGroupCurrentOption"
                            ];
                        }
                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    const taxesAndSurcharges =
                                      $queries?.fetchTaxes?.data ?? [];
                                    const pricingData =
                                      $queries?.fetchPricing?.data ?? [];
                                    const recurringData =
                                      $queries?.fetchRecurring?.data ?? [];
                                    let gstRate = 0;
                                    let surchargeRate = 0;
                                    taxesAndSurcharges.forEach(item => {
                                      if (item.is_tax) {
                                        if (item.name.toLowerCase() === "gst") {
                                          gstRate = Number(item.rate) / 100;
                                        }
                                      } else {
                                        if (
                                          item.name.toLowerCase() ===
                                          "surcharge"
                                        ) {
                                          surchargeRate =
                                            Number(item.rate) / 100;
                                        }
                                      }
                                    });
                                    if (!gstRate)
                                      console.warn(
                                        "No GST rate found in taxes and surcharges"
                                      );
                                    if (!surchargeRate)
                                      console.warn(
                                        "No surcharge rate found in taxes and surcharges"
                                      );
                                    const bathroomsOption =
                                      $state?.bathroomsRadioGroup
                                        ?.currentOption;
                                    const bedroomsOption =
                                      $state?.bedroomsRadioGroup?.currentOption;
                                    const serviceName =
                                      $state?.cleanTypeRadioGroup
                                        ?.currentOption;
                                    let price = 0;
                                    const bathroomsRadioGroupObject =
                                      pricingData.find(
                                        item =>
                                          item.option_name ===
                                            bathroomsOption &&
                                          item.service_name === serviceName
                                      );
                                    const bedroomsRadioGroupObject =
                                      pricingData.find(
                                        item =>
                                          item.option_name === bedroomsOption &&
                                          item.service_name === serviceName
                                      );
                                    let bedroomPrice = bedroomsRadioGroupObject
                                      ? Number(
                                          bedroomsRadioGroupObject.option_price ||
                                            0
                                        )
                                      : 0;
                                    let bathroomPrice =
                                      bathroomsRadioGroupObject
                                        ? Number(
                                            bathroomsRadioGroupObject.option_price ||
                                              0
                                          )
                                        : 0;
                                    price = bedroomPrice + bathroomPrice;
                                    console.log(
                                      "Bedroom Price: ",
                                      bedroomPrice
                                    );
                                    console.log(
                                      "Bathroom Price: ",
                                      bathroomPrice
                                    );
                                    let gst = price * gstRate;
                                    let surcharge = price * surchargeRate;
                                    price = price + gst + surcharge;
                                    console.log("GST: ", gst);
                                    console.log("Surcharge: ", surcharge);
                                    const frequencyOption =
                                      $state?.frequencyRadioGroup
                                        ?.currentOption;
                                    console.log(
                                      "Selected Frequency Option: ",
                                      frequencyOption
                                    );
                                    console.log(
                                      "Recurring Data: ",
                                      recurringData
                                    );
                                    const recurringDiscountObject =
                                      recurringData.find(
                                        item => item.name === frequencyOption
                                      );
                                    console.log(
                                      "Found Discount Object: ",
                                      recurringDiscountObject
                                    );
                                    let discountPercentage =
                                      recurringDiscountObject
                                        ? Number(
                                            recurringDiscountObject.discount_percentage
                                          )
                                        : 0;
                                    console.log(
                                      "Discount Percentage: ",
                                      discountPercentage
                                    );
                                    let discountAmount =
                                      price * (discountPercentage / 100);
                                    price = price - discountAmount;
                                    console.log(
                                      "Discount Amount: ",
                                      discountAmount
                                    );
                                    price = Math.max(0, price);
                                    console.log("Total Final Price: ", price);
                                    return ($state.subtotal.priceTotal = Number(
                                      price.toFixed(2)
                                    ));
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    options={(() => {
                      try {
                        return (() => {
                          const frequencyOptions =
                            $queries.fetchRecurring.data
                              ?.filter(
                                item =>
                                  item.service_name ===
                                  $state.cleanTypeRadioGroup.currentOption
                              )
                              .map(option => ({
                                value: option.name,
                                id: option.id,
                                label: option.display_name,
                                discountLabel:
                                  option.discount_percentage > 0
                                    ? `${Math.round(
                                        option.discount_percentage
                                      )}% Off`
                                    : "Switch Anytime"
                              })) ?? [];
                          return frequencyOptions;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    radioStyle={"discount"}
                    showSecondLineText={
                      hasVariant(globalVariants, "unnamedGroup", "mobileOnly")
                        ? false
                        : false
                    }
                    size={"small"}
                    textAlign={"center"}
                  />
                </Stack__>
              ) : null}
              <Button
                data-plasmic-name={"continueButton"}
                data-plasmic-override={overrides.continueButton}
                className={classNames("__wab_instance", sty.continueButton)}
                color={"cta"}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateCurrentFormPage"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["currentFormPage"]
                          },
                          operation: 2,
                          value: 2
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;
                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, oldValue + 1);
                          return oldValue + 1;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateCurrentFormPage"] != null &&
                    typeof $steps["updateCurrentFormPage"] === "object" &&
                    typeof $steps["updateCurrentFormPage"].then === "function"
                  ) {
                    $steps["updateCurrentFormPage"] = await $steps[
                      "updateCurrentFormPage"
                    ];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fAbu
                  )}
                >
                  {"Continue"}
                </div>
              </Button>
            </Stack__>
          ) : null}
          <div
            data-plasmic-name={"addons"}
            data-plasmic-override={overrides.addons}
            className={classNames(projectcss.all, sty.addons)}
          >
            <h1
              data-plasmic-name={"title4"}
              data-plasmic-override={overrides.title4}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.title4
              )}
            >
              {"Choose your Add-ons"}
            </h1>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iy7Y9)}
            >
              <Selectgroup
                data-plasmic-name={"selectGroup"}
                data-plasmic-override={overrides.selectGroup}
                className={classNames("__wab_instance", sty.selectGroup)}
                onSelectgrouptotlapriceChange={generateStateOnChangeProp(
                  $state,
                  ["selectGroup", "selectgrouptotlaprice"]
                )}
                onVariableChange={generateStateOnChangeProp($state, [
                  "selectGroup",
                  "variable"
                ])}
                options={[
                  {
                    name: "Inside Fridge",
                    price: "+$19",
                    state: "state1",
                    isChecked: false
                  },
                  {
                    name: "Kitchen Cabinet",
                    price: "+$20",
                    state: "state2",
                    isChecked: false
                  },
                  {
                    name: "Inside Oven",
                    price: "+$23",
                    state: "state3",
                    isChecked: false
                  },
                  {
                    name: "Interior Windows",
                    price: "+$20",
                    state: "state4",
                    isChecked: false
                  },
                  {
                    name: "Sliding Window Doors",
                    price: "+$20",
                    state: "state5",
                    isChecked: false
                  },
                  {
                    name: "Wash Dishes",
                    price: "+$23",
                    state: "state6",
                    isChecked: false
                  },
                  {
                    name: "Carpet Steam Clean",
                    price: "+$23",
                    state: "state7",
                    isChecked: false
                  }
                ]}
                selectGroup={"SelectAddGroup"}
                selectgrouptotlaprice={generateStateValueProp($state, [
                  "selectGroup",
                  "selectgrouptotlaprice"
                ])}
                variable={generateStateValueProp($state, [
                  "selectGroup",
                  "variable"
                ])}
              />

              <Button
                data-plasmic-name={"continueButton4"}
                data-plasmic-override={overrides.continueButton4}
                className={classNames("__wab_instance", sty.continueButton4)}
                color={"cta"}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateCurrentFormPage"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["currentFormPage"]
                          },
                          operation: 2,
                          value: 2
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;
                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, oldValue + 1);
                          return oldValue + 1;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateCurrentFormPage"] != null &&
                    typeof $steps["updateCurrentFormPage"] === "object" &&
                    typeof $steps["updateCurrentFormPage"].then === "function"
                  ) {
                    $steps["updateCurrentFormPage"] = await $steps[
                      "updateCurrentFormPage"
                    ];
                  }
                }}
              >
                {"Continue"}
              </Button>
            </Stack__>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"datePickerFormPage"}
            data-plasmic-override={overrides.datePickerFormPage}
            hasGap={true}
            className={classNames(projectcss.all, sty.datePickerFormPage)}
          >
            <h1
              data-plasmic-name={"title3"}
              data-plasmic-override={overrides.title3}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.title3
              )}
            >
              {"When should we come clean?"}
            </h1>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__eZeIe)}
            >
              <div
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__dQhxF)}>
                  <CalendarWidget
                    data-plasmic-name={"calendarWidget"}
                    data-plasmic-override={overrides.calendarWidget}
                    className={classNames("__wab_instance", sty.calendarWidget)}
                    onSelectedDateChange={generateStateOnChangeProp($state, [
                      "calendarWidget",
                      "selectedDate"
                    ])}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column___5U6X2)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1MBhj)}
                  >
                    <RadioButtonGroup
                      data-plasmic-name={"timeRadioGroup"}
                      data-plasmic-override={overrides.timeRadioGroup}
                      className={classNames(
                        "__wab_instance",
                        sty.timeRadioGroup
                      )}
                      columnCount={2}
                      currentOption={generateStateValueProp($state, [
                        "timeRadioGroup",
                        "currentOption"
                      ])}
                      groupName={"timepicker"}
                      itemWidth={"stretchItemToFill"}
                      layout={"columns"}
                      onCurrentOptionChange={generateStateOnChangeProp($state, [
                        "timeRadioGroup",
                        "currentOption"
                      ])}
                      options={[
                        { value: "0700", id: "0700", label: "7:00 AM" },
                        { value: "0730", id: "0730", label: "7:30 AM" },
                        { value: "0800", id: "0800", label: "8:00 AM" },
                        { value: "0830", id: "0830", label: "8:30 AM" },
                        { value: "0900", id: "0900", label: "9:00 AM" },
                        { value: "0930", id: "0930", label: "9:30 AM" },
                        { value: "1000", id: "1000", label: "10:00 AM" },
                        { value: "1030", id: "1030", label: "10:30 AM" },
                        { value: "1100", id: "1100", label: "11:00 AM" },
                        { value: "1130", id: "1130", label: "11:30 AM" },
                        { value: "1200", id: "1200", label: "12:00 PM" },
                        { value: "1230", id: "1230", label: "12:30 PM" },
                        { value: "1300", id: "1300", label: "1:00 PM" },
                        { value: "1330", id: "1330", label: "1:30 PM" },
                        { value: "1400", id: "1400", label: "2:00 PM" },
                        { value: "1430", id: "1430", label: "2:30 PM" },
                        { value: "1500", id: "1500", label: "3:00 PM" },
                        { value: "1530", id: "1530", label: "3:30 PM" },
                        { value: "1600", id: "1600", label: "4:00 PM" },
                        { value: "1630", id: "1630", label: "4:30 PM" },
                        { value: "1700", id: "1700", label: "5:00 PM" }
                      ]}
                      size={"small"}
                      textAlign={"left"}
                    />
                  </div>
                </div>
              </div>
            </Stack__>
            <Button
              data-plasmic-name={"continueButton5"}
              data-plasmic-override={overrides.continueButton5}
              className={classNames("__wab_instance", sty.continueButton5)}
              color={"cta"}
              onClick={async event => {
                const $steps = {};
                $steps["updateCurrentFormPage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["currentFormPage"]
                        },
                        operation: 2,
                        value: 2
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, oldValue + 1);
                        return oldValue + 1;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateCurrentFormPage"] != null &&
                  typeof $steps["updateCurrentFormPage"] === "object" &&
                  typeof $steps["updateCurrentFormPage"].then === "function"
                ) {
                  $steps["updateCurrentFormPage"] = await $steps[
                    "updateCurrentFormPage"
                  ];
                }
              }}
            >
              {"Continue"}
            </Button>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"locationForm"}
            data-plasmic-override={overrides.locationForm}
            hasGap={true}
            className={classNames(projectcss.all, sty.locationForm)}
          >
            <h1
              data-plasmic-name={"title2"}
              data-plasmic-override={overrides.title2}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.title2
              )}
            >
              {"Where are we coming to clean?"}
            </h1>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__oJb1J)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"addressInfo"}
                data-plasmic-override={overrides.addressInfo}
                hasGap={true}
                className={classNames(projectcss.all, sty.addressInfo)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__f2Qez)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oGBnb
                    )}
                  >
                    {"Address"}
                  </div>
                  <TextInput
                    data-plasmic-name={"streetInput"}
                    data-plasmic-override={overrides.streetInput}
                    className={classNames("__wab_instance", sty.streetInput)}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "streetInput",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    placeholder={
                      hasVariant(globalVariants, "unnamedGroup", "mobileOnly")
                        ? "Street number and address"
                        : ``
                    }
                    value={
                      generateStateValueProp($state, [
                        "streetInput",
                        "value"
                      ]) ?? ""
                    }
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__n9Hv6)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bbSCk
                    )}
                  >
                    {"Apt"}
                  </div>
                  <TextInput
                    data-plasmic-name={"aptInput"}
                    data-plasmic-override={overrides.aptInput}
                    className={classNames("__wab_instance", sty.aptInput)}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, ["aptInput", "value"])(
                        (e => e.target?.value).apply(null, eventArgs)
                      );
                    }}
                    placeholder={
                      hasVariant(globalVariants, "unnamedGroup", "mobileOnly")
                        ? "Apt"
                        : ``
                    }
                    value={
                      generateStateValueProp($state, ["aptInput", "value"]) ??
                      ""
                    }
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__thn4B)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lvKEc
                    )}
                  >
                    {"Zipcode"}
                  </div>
                  <TextInput
                    data-plasmic-name={"zipInput"}
                    data-plasmic-override={overrides.zipInput}
                    className={classNames("__wab_instance", sty.zipInput)}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, ["zipInput", "value"])(
                        (e => e.target?.value).apply(null, eventArgs)
                      );
                    }}
                    placeholder={
                      hasVariant(globalVariants, "unnamedGroup", "mobileOnly")
                        ? "Zip"
                        : ``
                    }
                    value={
                      generateStateValueProp($state, ["zipInput", "value"]) ??
                      ""
                    }
                  />
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"getIn"}
                data-plasmic-override={overrides.getIn}
                hasGap={true}
                className={classNames(projectcss.all, sty.getIn)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jiAi
                  )}
                >
                  {"How do we get in?"}
                </div>
                <RadioButtonGroup
                  data-plasmic-name={"getInRadioGroup"}
                  data-plasmic-override={overrides.getInRadioGroup}
                  className={classNames("__wab_instance", sty.getInRadioGroup)}
                  columnCount={2}
                  currentOption={generateStateValueProp($state, [
                    "getInRadioGroup",
                    "currentOption"
                  ])}
                  gridItemMaxWidthPx={
                    hasVariant(globalVariants, "unnamedGroup", "mobileOnly")
                      ? 170
                      : 200
                  }
                  groupName={"get in"}
                  itemWidth={"stretchItemToFill"}
                  layout={"grid"}
                  onCurrentOptionChange={generateStateOnChangeProp($state, [
                    "getInRadioGroup",
                    "currentOption"
                  ])}
                  options={[
                    {
                      value: "someoneIsHome",
                      id: "someoneIsHome",
                      label: "Someone is home"
                    },
                    {
                      value: "keyLockbox",
                      id: "keyLockbox",
                      label: "Key lockbox"
                    },
                    {
                      value: "hiddenKey",
                      id: "hiddenKey",
                      label: "Hidden key"
                    },
                    { value: "other", id: "other", label: "Other" }
                  ]}
                  size={"small"}
                  textAlign={"center"}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"pets"}
                data-plasmic-override={overrides.pets}
                hasGap={true}
                className={classNames(projectcss.all, sty.pets)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lHO
                  )}
                >
                  {"Any pets?"}
                </div>
                <RadioButtonGroup
                  data-plasmic-name={"petsRadioGroup"}
                  data-plasmic-override={overrides.petsRadioGroup}
                  className={classNames("__wab_instance", sty.petsRadioGroup)}
                  columnCount={2}
                  currentOption={generateStateValueProp($state, [
                    "petsRadioGroup",
                    "currentOption"
                  ])}
                  gridItemMaxWidthPx={
                    hasVariant(globalVariants, "unnamedGroup", "mobileOnly")
                      ? 170
                      : 200
                  }
                  groupName={"pets"}
                  itemWidth={"stretchItemToFill"}
                  layout={"grid"}
                  onCurrentOptionChange={generateStateOnChangeProp($state, [
                    "petsRadioGroup",
                    "currentOption"
                  ])}
                  options={[
                    { value: "noPets", id: "noPets", label: "No Pets" },
                    { value: "cat", id: "cat", label: "Cat" },
                    { value: "dog", id: "dog", label: "Dog" },
                    { value: "other", id: "other", label: "Other" }
                  ]}
                  size={"small"}
                />
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"additionalInstructions"}
                data-plasmic-override={overrides.additionalInstructions}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.additionalInstructions
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hX7Xu
                  )}
                >
                  {"Special Notes or Instructions (optional)"}
                </div>
                <MultiLineInput
                  data-plasmic-name={"instructionTextArea"}
                  data-plasmic-override={overrides.instructionTextArea}
                  className={classNames(
                    "__wab_instance",
                    sty.instructionTextArea
                  )}
                  placeholder={"Instructions to the cleaners"}
                  rows={5}
                />
              </Stack__>
            </Stack__>
            <Button
              data-plasmic-name={"continueButton6"}
              data-plasmic-override={overrides.continueButton6}
              className={classNames("__wab_instance", sty.continueButton6)}
              color={"cta"}
              onClick={async event => {
                const $steps = {};
                $steps["updateCurrentFormPage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["currentFormPage"]
                        },
                        operation: 2,
                        value: 2
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, oldValue + 1);
                        return oldValue + 1;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateCurrentFormPage"] != null &&
                  typeof $steps["updateCurrentFormPage"] === "object" &&
                  typeof $steps["updateCurrentFormPage"].then === "function"
                ) {
                  $steps["updateCurrentFormPage"] = await $steps[
                    "updateCurrentFormPage"
                  ];
                }
              }}
            >
              {"Continue"}
            </Button>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"billingFormPage"}
            data-plasmic-override={overrides.billingFormPage}
            hasGap={true}
            className={classNames(projectcss.all, sty.billingFormPage)}
          >
            <h1
              data-plasmic-name={"title5"}
              data-plasmic-override={overrides.title5}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.title5
              )}
            >
              {"Billing Header"}
            </h1>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jl15V)}
            />

            <Button
              data-plasmic-name={"continueButton7"}
              data-plasmic-override={overrides.continueButton7}
              className={classNames("__wab_instance", sty.continueButton7)}
              color={"cta"}
              onClick={async event => {
                const $steps = {};
                $steps["updateCurrentFormPage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["currentFormPage"]
                        },
                        operation: 2,
                        value: 2
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, oldValue + 1);
                        return oldValue + 1;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateCurrentFormPage"] != null &&
                  typeof $steps["updateCurrentFormPage"] === "object" &&
                  typeof $steps["updateCurrentFormPage"].then === "function"
                ) {
                  $steps["updateCurrentFormPage"] = await $steps[
                    "updateCurrentFormPage"
                  ];
                }
              }}
            >
              {"BOOK NOW, PAY ON THE DAY"}
            </Button>
          </Stack__>
        </Stack__>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  booking: [
    "booking",
    "nav",
    "navBar",
    "selectCards",
    "logo",
    "svg",
    "selections",
    "summaryCardDatetime",
    "summaryCardAddress",
    "finalRule",
    "subtotal",
    "billingRule2",
    "billingRule",
    "section",
    "bookingForm",
    "serviceFormPage",
    "title",
    "cleanTypeBlock",
    "cleanTypeRadioGroup",
    "bedroomBlock",
    "bedroomsRadioGroup",
    "bathroomBlock",
    "bathroomsRadioGroup",
    "frequencyBlock",
    "frequencyRadioGroup",
    "continueButton",
    "addons",
    "title4",
    "selectGroup",
    "continueButton4",
    "datePickerFormPage",
    "title3",
    "columns",
    "calendarWidget",
    "timeRadioGroup",
    "continueButton5",
    "locationForm",
    "title2",
    "addressInfo",
    "streetInput",
    "aptInput",
    "zipInput",
    "getIn",
    "getInRadioGroup",
    "pets",
    "petsRadioGroup",
    "additionalInstructions",
    "instructionTextArea",
    "continueButton6",
    "billingFormPage",
    "title5",
    "continueButton7"
  ],

  nav: [
    "nav",
    "navBar",
    "selectCards",
    "logo",
    "svg",
    "selections",
    "summaryCardDatetime",
    "summaryCardAddress",
    "finalRule",
    "subtotal",
    "billingRule2",
    "billingRule"
  ],

  navBar: [
    "navBar",
    "selectCards",
    "logo",
    "svg",
    "selections",
    "summaryCardDatetime",
    "summaryCardAddress",
    "finalRule",
    "subtotal",
    "billingRule2",
    "billingRule"
  ],

  selectCards: [
    "selectCards",
    "logo",
    "svg",
    "selections",
    "summaryCardDatetime",
    "summaryCardAddress"
  ],

  logo: ["logo", "svg"],
  svg: ["svg"],
  selections: ["selections", "summaryCardDatetime", "summaryCardAddress"],
  summaryCardDatetime: ["summaryCardDatetime"],
  summaryCardAddress: ["summaryCardAddress"],
  finalRule: ["finalRule"],
  subtotal: ["subtotal"],
  billingRule2: ["billingRule2"],
  billingRule: ["billingRule"],
  section: [
    "section",
    "bookingForm",
    "serviceFormPage",
    "title",
    "cleanTypeBlock",
    "cleanTypeRadioGroup",
    "bedroomBlock",
    "bedroomsRadioGroup",
    "bathroomBlock",
    "bathroomsRadioGroup",
    "frequencyBlock",
    "frequencyRadioGroup",
    "continueButton",
    "addons",
    "title4",
    "selectGroup",
    "continueButton4",
    "datePickerFormPage",
    "title3",
    "columns",
    "calendarWidget",
    "timeRadioGroup",
    "continueButton5",
    "locationForm",
    "title2",
    "addressInfo",
    "streetInput",
    "aptInput",
    "zipInput",
    "getIn",
    "getInRadioGroup",
    "pets",
    "petsRadioGroup",
    "additionalInstructions",
    "instructionTextArea",
    "continueButton6",
    "billingFormPage",
    "title5",
    "continueButton7"
  ],

  bookingForm: [
    "bookingForm",
    "serviceFormPage",
    "title",
    "cleanTypeBlock",
    "cleanTypeRadioGroup",
    "bedroomBlock",
    "bedroomsRadioGroup",
    "bathroomBlock",
    "bathroomsRadioGroup",
    "frequencyBlock",
    "frequencyRadioGroup",
    "continueButton",
    "addons",
    "title4",
    "selectGroup",
    "continueButton4",
    "datePickerFormPage",
    "title3",
    "columns",
    "calendarWidget",
    "timeRadioGroup",
    "continueButton5",
    "locationForm",
    "title2",
    "addressInfo",
    "streetInput",
    "aptInput",
    "zipInput",
    "getIn",
    "getInRadioGroup",
    "pets",
    "petsRadioGroup",
    "additionalInstructions",
    "instructionTextArea",
    "continueButton6",
    "billingFormPage",
    "title5",
    "continueButton7"
  ],

  serviceFormPage: [
    "serviceFormPage",
    "title",
    "cleanTypeBlock",
    "cleanTypeRadioGroup",
    "bedroomBlock",
    "bedroomsRadioGroup",
    "bathroomBlock",
    "bathroomsRadioGroup",
    "frequencyBlock",
    "frequencyRadioGroup",
    "continueButton"
  ],

  title: ["title"],
  cleanTypeBlock: ["cleanTypeBlock", "cleanTypeRadioGroup"],
  cleanTypeRadioGroup: ["cleanTypeRadioGroup"],
  bedroomBlock: ["bedroomBlock", "bedroomsRadioGroup"],
  bedroomsRadioGroup: ["bedroomsRadioGroup"],
  bathroomBlock: ["bathroomBlock", "bathroomsRadioGroup"],
  bathroomsRadioGroup: ["bathroomsRadioGroup"],
  frequencyBlock: ["frequencyBlock", "frequencyRadioGroup"],
  frequencyRadioGroup: ["frequencyRadioGroup"],
  continueButton: ["continueButton"],
  addons: ["addons", "title4", "selectGroup", "continueButton4"],
  title4: ["title4"],
  selectGroup: ["selectGroup"],
  continueButton4: ["continueButton4"],
  datePickerFormPage: [
    "datePickerFormPage",
    "title3",
    "columns",
    "calendarWidget",
    "timeRadioGroup",
    "continueButton5"
  ],

  title3: ["title3"],
  columns: ["columns", "calendarWidget", "timeRadioGroup"],
  calendarWidget: ["calendarWidget"],
  timeRadioGroup: ["timeRadioGroup"],
  continueButton5: ["continueButton5"],
  locationForm: [
    "locationForm",
    "title2",
    "addressInfo",
    "streetInput",
    "aptInput",
    "zipInput",
    "getIn",
    "getInRadioGroup",
    "pets",
    "petsRadioGroup",
    "additionalInstructions",
    "instructionTextArea",
    "continueButton6"
  ],

  title2: ["title2"],
  addressInfo: ["addressInfo", "streetInput", "aptInput", "zipInput"],
  streetInput: ["streetInput"],
  aptInput: ["aptInput"],
  zipInput: ["zipInput"],
  getIn: ["getIn", "getInRadioGroup"],
  getInRadioGroup: ["getInRadioGroup"],
  pets: ["pets", "petsRadioGroup"],
  petsRadioGroup: ["petsRadioGroup"],
  additionalInstructions: ["additionalInstructions", "instructionTextArea"],
  instructionTextArea: ["instructionTextArea"],
  continueButton6: ["continueButton6"],
  billingFormPage: ["billingFormPage", "title5", "continueButton7"],
  title5: ["title5"],
  continueButton7: ["continueButton7"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBooking__ArgProps,
          internalVariantPropNames: PlasmicBooking__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBooking__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "booking") {
    func.displayName = "PlasmicBooking";
  } else {
    func.displayName = `PlasmicBooking.${nodeName}`;
  }
  return func;
}

export const PlasmicBooking = Object.assign(
  // Top-level PlasmicBooking renders the root element
  makeNodeComponent("booking"),
  {
    // Helper components rendering sub-elements
    nav: makeNodeComponent("nav"),
    navBar: makeNodeComponent("navBar"),
    selectCards: makeNodeComponent("selectCards"),
    logo: makeNodeComponent("logo"),
    svg: makeNodeComponent("svg"),
    selections: makeNodeComponent("selections"),
    summaryCardDatetime: makeNodeComponent("summaryCardDatetime"),
    summaryCardAddress: makeNodeComponent("summaryCardAddress"),
    finalRule: makeNodeComponent("finalRule"),
    subtotal: makeNodeComponent("subtotal"),
    billingRule2: makeNodeComponent("billingRule2"),
    billingRule: makeNodeComponent("billingRule"),
    section: makeNodeComponent("section"),
    bookingForm: makeNodeComponent("bookingForm"),
    serviceFormPage: makeNodeComponent("serviceFormPage"),
    title: makeNodeComponent("title"),
    cleanTypeBlock: makeNodeComponent("cleanTypeBlock"),
    cleanTypeRadioGroup: makeNodeComponent("cleanTypeRadioGroup"),
    bedroomBlock: makeNodeComponent("bedroomBlock"),
    bedroomsRadioGroup: makeNodeComponent("bedroomsRadioGroup"),
    bathroomBlock: makeNodeComponent("bathroomBlock"),
    bathroomsRadioGroup: makeNodeComponent("bathroomsRadioGroup"),
    frequencyBlock: makeNodeComponent("frequencyBlock"),
    frequencyRadioGroup: makeNodeComponent("frequencyRadioGroup"),
    continueButton: makeNodeComponent("continueButton"),
    addons: makeNodeComponent("addons"),
    title4: makeNodeComponent("title4"),
    selectGroup: makeNodeComponent("selectGroup"),
    continueButton4: makeNodeComponent("continueButton4"),
    datePickerFormPage: makeNodeComponent("datePickerFormPage"),
    title3: makeNodeComponent("title3"),
    columns: makeNodeComponent("columns"),
    calendarWidget: makeNodeComponent("calendarWidget"),
    timeRadioGroup: makeNodeComponent("timeRadioGroup"),
    continueButton5: makeNodeComponent("continueButton5"),
    locationForm: makeNodeComponent("locationForm"),
    title2: makeNodeComponent("title2"),
    addressInfo: makeNodeComponent("addressInfo"),
    streetInput: makeNodeComponent("streetInput"),
    aptInput: makeNodeComponent("aptInput"),
    zipInput: makeNodeComponent("zipInput"),
    getIn: makeNodeComponent("getIn"),
    getInRadioGroup: makeNodeComponent("getInRadioGroup"),
    pets: makeNodeComponent("pets"),
    petsRadioGroup: makeNodeComponent("petsRadioGroup"),
    additionalInstructions: makeNodeComponent("additionalInstructions"),
    instructionTextArea: makeNodeComponent("instructionTextArea"),
    continueButton6: makeNodeComponent("continueButton6"),
    billingFormPage: makeNodeComponent("billingFormPage"),
    title5: makeNodeComponent("title5"),
    continueButton7: makeNodeComponent("continueButton7"),
    // Metadata about props expected for PlasmicBooking
    internalVariantProps: PlasmicBooking__VariantProps,
    internalArgProps: PlasmicBooking__ArgProps
  }
);

export default PlasmicBooking;
/* prettier-ignore-end */
