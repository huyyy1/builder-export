// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dCBp3p2g2cgYAgGFEQRPSF
// Component: nE9sfg9wIE5V
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: kE6qUVL-GGsA/component
import { useScreenVariants as useScreenVariants_7MCivF4FUjWx } from "./PlasmicGlobalVariant__UnnamedGroup"; // plasmic-import: 7mCivF4FUjWX/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: dCBp3p2g2cgYAgGFEQRPSF/projectcss
import sty from "./PlasmicNavigation.module.css"; // plasmic-import: nE9sfg9wIE5V/css
import ArrowDropDownIcon from "./icons/PlasmicIcon__ArrowDropDown"; // plasmic-import: FG5DQF3s8eVY/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: fveroj4-SzwS/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: cwmzq0pXjBpx/icon
import SmPhoneIcon from "./icons/PlasmicIcon__SmPhone"; // plasmic-import: G4FTtYLJq7mT/icon
import simplyMaidLogoLightSvg2BJlvkW2PhBmU from "./images/simplyMaidLogoLightSvg2.svg"; // plasmic-import: BJlvkW2PHBmU/picture

createPlasmicElementProxy;

export const PlasmicNavigation__VariantProps = new Array();

export const PlasmicNavigation__ArgProps = new Array();

const $$ = {};

function PlasmicNavigation__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    unnamedGroup: useScreenVariants_7MCivF4FUjWx()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"nav"}
      data-plasmic-override={overrides.nav}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.nav
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"navContainer"}
        data-plasmic-override={overrides.navContainer}
        hasGap={true}
        className={classNames(projectcss.all, sty.navContainer)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__jFogb)}>
          <div
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            className={classNames(projectcss.all, sty.logo)}
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"30px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              src={{
                src: simplyMaidLogoLightSvg2BJlvkW2PhBmU,
                fullWidth: 279,
                fullHeight: 46,
                aspectRatio: 6.065217
              }}
            />
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__rvqLg)}>
          <Stack__
            as={"div"}
            data-plasmic-name={"citySelect"}
            data-plasmic-override={overrides.citySelect}
            hasGap={true}
            className={classNames(projectcss.all, sty.citySelect)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__beViU
              )}
            >
              {"Melbourne"}
            </div>
            <div
              data-plasmic-name={"arrowDropDown"}
              data-plasmic-override={overrides.arrowDropDown}
              className={classNames(projectcss.all, sty.arrowDropDown)}
            >
              <ArrowDropDownIcon
                className={classNames(projectcss.all, sty.svg__vMesl)}
                role={"img"}
              />
            </div>
          </Stack__>
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___1Vtw7)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ww8T4)}>
            <div
              data-plasmic-name={"navGroup"}
              data-plasmic-override={overrides.navGroup}
              className={classNames(projectcss.all, sty.navGroup)}
            >
              <Button
                className={classNames("__wab_instance", sty.button__eG3K)}
                color={"clear"}
                endIcon={
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__fp9NT)}
                    role={"img"}
                  />
                }
                startIcon={
                  <CheckSvgIcon
                    className={classNames(projectcss.all, sty.svg__q0UsL)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  data-plasmic-name={"cleanType"}
                  data-plasmic-override={overrides.cleanType}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.cleanType
                  )}
                >
                  {"Clean Types"}
                </div>
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__bqCJu)}
                color={"clear"}
                endIcon={
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__wLNd)}
                    role={"img"}
                  />
                }
                startIcon={
                  <CheckSvgIcon
                    className={classNames(projectcss.all, sty.svg___47Tzo)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bdXpe
                  )}
                >
                  {"Pricing"}
                </div>
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__yNlhm)}
                color={"clear"}
                endIcon={
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__ltyga)}
                    role={"img"}
                  />
                }
                startIcon={
                  <CheckSvgIcon
                    className={classNames(projectcss.all, sty.svg___0F2C3)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vo0Zx
                  )}
                >
                  {"FAQ"}
                </div>
              </Button>
            </div>
          </div>
          <div
            data-plasmic-name={"navCta"}
            data-plasmic-override={overrides.navCta}
            className={classNames(projectcss.all, sty.navCta)}
          >
            <Button
              className={classNames("__wab_instance", sty.button___1MeQm)}
              color={"clear"}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__noqk)}
                  role={"img"}
                />
              }
              startIcon={
                <CheckSvgIcon
                  className={classNames(projectcss.all, sty.svg__hfaTb)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__q4Upo
                )}
              >
                {"Get Price"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__r9LuE)}
              color={"clear"}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__j3K5R)}
                  role={"img"}
                />
              }
              shape={"round"}
              showStartIcon={true}
              size={"minimal"}
              startIcon={
                <SmPhoneIcon
                  className={classNames(projectcss.all, sty.svg__a3BUz)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ds0OI
                )}
              >
                {"1300 007 393"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button___5XhW7)}
              endIcon={
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__zLlCn)}
                  role={"img"}
                />
              }
              startIcon={
                <CheckSvgIcon
                  className={classNames(projectcss.all, sty.svg__zbWi9)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ppml8
                )}
              >
                {"Sign up"}
              </div>
            </Button>
          </div>
        </Stack__>
        <div className={classNames(projectcss.all, sty.freeBox__tYvP7)}>
          <button
            className={classNames(
              projectcss.all,
              projectcss.button,
              projectcss.__wab_text,
              sty.button__dXMF
            )}
          >
            {"Sign up"}
          </button>
          <Button
            className={classNames("__wab_instance", sty.button__pAe75)}
            color={"clear"}
            endIcon={
              <IconIcon
                className={classNames(projectcss.all, sty.svg___3Ps99)}
                role={"img"}
              />
            }
            startIcon={
              <CheckSvgIcon
                className={classNames(projectcss.all, sty.svg__bepQa)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ko3Jz
              )}
            >
              {"Log in"}
            </div>
          </Button>
        </div>
      </Stack__>
    </Stack__>
  );
}

const PlasmicDescendants = {
  nav: [
    "nav",
    "navContainer",
    "logo",
    "img",
    "citySelect",
    "arrowDropDown",
    "navGroup",
    "cleanType",
    "navCta"
  ],

  navContainer: [
    "navContainer",
    "logo",
    "img",
    "citySelect",
    "arrowDropDown",
    "navGroup",
    "cleanType",
    "navCta"
  ],

  logo: ["logo", "img"],
  img: ["img"],
  citySelect: ["citySelect", "arrowDropDown"],
  arrowDropDown: ["arrowDropDown"],
  navGroup: ["navGroup", "cleanType"],
  cleanType: ["cleanType"],
  navCta: ["navCta"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavigation__ArgProps,
          internalVariantPropNames: PlasmicNavigation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavigation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "nav") {
    func.displayName = "PlasmicNavigation";
  } else {
    func.displayName = `PlasmicNavigation.${nodeName}`;
  }
  return func;
}

export const PlasmicNavigation = Object.assign(
  // Top-level PlasmicNavigation renders the root element
  makeNodeComponent("nav"),
  {
    // Helper components rendering sub-elements
    navContainer: makeNodeComponent("navContainer"),
    logo: makeNodeComponent("logo"),
    img: makeNodeComponent("img"),
    citySelect: makeNodeComponent("citySelect"),
    arrowDropDown: makeNodeComponent("arrowDropDown"),
    navGroup: makeNodeComponent("navGroup"),
    cleanType: makeNodeComponent("cleanType"),
    navCta: makeNodeComponent("navCta"),
    // Metadata about props expected for PlasmicNavigation
    internalVariantProps: PlasmicNavigation__VariantProps,
    internalArgProps: PlasmicNavigation__ArgProps
  }
);

export default PlasmicNavigation;
/* prettier-ignore-end */
