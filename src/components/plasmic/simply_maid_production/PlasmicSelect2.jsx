// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dCBp3p2g2cgYAgGFEQRPSF
// Component: SfsoP6LMRsE0
import * as React from "react";
import {
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  get as $stateGet,
  hasVariant,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariants_7MCivF4FUjWx } from "./PlasmicGlobalVariant__UnnamedGroup"; // plasmic-import: 7mCivF4FUjWX/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: dCBp3p2g2cgYAgGFEQRPSF/projectcss
import sty from "./PlasmicSelect2.module.css"; // plasmic-import: SfsoP6LMRsE0/css
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: 3f6tQnu7YVJ9/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: tJX9d-ThyDUU/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: Bu64j9uRWoq_/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: QE_O566Lg6J2/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: RdmuZOmcPLK7/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: eBg0TTkmuuim/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: UFo7mlIWeGoQ/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: T7HAAszxjUC1/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: hcn3f2ZeAp9u/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: 4J2YoizsNnUT/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: ilwIvudRSeSE/icon
import image2XSxDtZv7At from "./images/image2.svg"; // plasmic-import: x_SxDT_Zv7At/picture
import image3ANSw2QMrtOh7 from "./images/image3.svg"; // plasmic-import: aNSw2QMrtOh7/picture
import image5MEgEtgDTtAc from "./images/image5.svg"; // plasmic-import: _mEGEtgDTtAC/picture
import image60OlFhgAlS20 from "./images/image6.svg"; // plasmic-import: 0Ol-FhgAlS20/picture
import image7UTphadGZeH3D from "./images/image7.svg"; // plasmic-import: uTphadGZeH3D/picture
import image8XpgFtvFrKqsa from "./images/image8.svg"; // plasmic-import: xpgFTVFrKQSA/picture

createPlasmicElementProxy;

export const PlasmicSelect2__VariantProps = new Array("checked", "total");

export const PlasmicSelect2__ArgProps = new Array(
  "name",
  "price",
  "isChecked",
  "selectButtonTotalprice",
  "onSelectButtonTotalpriceChange"
);

const $$ = {};

function PlasmicSelect2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          price: "$25",
          isChecked: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "checked",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.isChecked;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.checked
      },
      {
        path: "total",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.total
      },
      {
        path: "count",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "selectButtonTotalprice",
        type: "writable",
        variableType: "number",
        valueProp: "selectButtonTotalprice",
        onChangeProp: "onSelectButtonTotalpriceChange"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    unnamedGroup: useScreenVariants_7MCivF4FUjWx()
  });
  return (
    <div
      data-plasmic-name={"frame6082"}
      data-plasmic-override={overrides.frame6082}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.frame6082,
        {
          [sty.frame6082checked]: hasVariant($state, "checked", "checked"),
          [sty.frame6082total_state1]: hasVariant($state, "total", "state1")
        }
      )}
      onClick={async event => {
        const $steps = {};
        $steps["updateSelectButtonTotalprice"] =
          $props.isChecked == false
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["selectButtonTotalprice"]
                  },
                  operation: 2
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;
                  const oldValue = $stateGet(objRoot, variablePath);
                  $stateSet(objRoot, variablePath, oldValue + 1);
                  return oldValue + 1;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
        if (
          $steps["updateSelectButtonTotalprice"] != null &&
          typeof $steps["updateSelectButtonTotalprice"] === "object" &&
          typeof $steps["updateSelectButtonTotalprice"].then === "function"
        ) {
          $steps["updateSelectButtonTotalprice"] = await $steps[
            "updateSelectButtonTotalprice"
          ];
        }
        $steps["updateChecked"] = true
          ? (() => {
              const actionArgs = {
                vgroup: "checked",
                operation: 2,
                value: "checked"
              };
              return (({ vgroup, value }) => {
                if (typeof value === "string") {
                  value = [value];
                }
                const oldValue = $stateGet($state, vgroup);
                $stateSet($state, vgroup, !oldValue);
                return !oldValue;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateChecked"] != null &&
          typeof $steps["updateChecked"] === "object" &&
          typeof $steps["updateChecked"].then === "function"
        ) {
          $steps["updateChecked"] = await $steps["updateChecked"];
        }
      }}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"frame6001"}
        data-plasmic-override={overrides.frame6001}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame6001, {
          [sty.frame6001total_state1]: hasVariant($state, "total", "state1"),
          [sty.frame6001total_state3]: hasVariant($state, "total", "state3"),
          [sty.frame6001total_state4]: hasVariant($state, "total", "state4"),
          [sty.frame6001total_state6]: hasVariant($state, "total", "state6")
        })}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"frame6078"}
          data-plasmic-override={overrides.frame6078}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame6078)}
        >
          <div
            data-plasmic-name={"frame427322247"}
            data-plasmic-override={overrides.frame427322247}
            className={classNames(projectcss.all, sty.frame427322247)}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__piCCn, {
                [sty.imgchecked__piCCnB2Ar]: hasVariant(
                  $state,
                  "checked",
                  "checked"
                )
              })}
              displayHeight={"24px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"24px"}
              loading={"lazy"}
              src={
                hasVariant($state, "checked", "checked")
                  ? {
                      src: image3ANSw2QMrtOh7,
                      fullWidth: 24,
                      fullHeight: 24,
                      aspectRatio: 1
                    }
                  : {
                      src: image2XSxDtZv7At,
                      fullWidth: 24,
                      fullHeight: 24,
                      aspectRatio: 1
                    }
              }
            />
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"frame6005"}
            data-plasmic-override={overrides.frame6005}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame6005)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__m5WSi
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Inside Fridge";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2I7F
              )}
            >
              {"+$25"}
            </div>
          </Stack__>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"frame427322248"}
          data-plasmic-override={overrides.frame427322248}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame427322248, {
            [sty.frame427322248checked]: hasVariant(
              $state,
              "checked",
              "checked"
            ),
            [sty.frame427322248total_state1]: hasVariant(
              $state,
              "total",
              "state1"
            ),
            [sty.frame427322248total_state3]: hasVariant(
              $state,
              "total",
              "state3"
            ),
            [sty.frame427322248total_state4]: hasVariant(
              $state,
              "total",
              "state4"
            ),
            [sty.frame427322248total_state5]: hasVariant(
              $state,
              "total",
              "state5"
            ),
            [sty.frame427322248total_state6]: hasVariant(
              $state,
              "total",
              "state6"
            ),
            [sty.frame427322248total_state7]: hasVariant(
              $state,
              "total",
              "state7"
            )
          })}
        >
          <div
            data-plasmic-name={"buttonIcons3"}
            data-plasmic-override={overrides.buttonIcons3}
            className={classNames(projectcss.all, sty.buttonIcons3)}
          >
            <div
              data-plasmic-name={"badge3"}
              data-plasmic-override={overrides.badge3}
              className={classNames(projectcss.all, sty.badge3, {
                [sty.badge3total_state1]: hasVariant($state, "total", "state1")
              })}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"badgeAndTagSmall3"}
                data-plasmic-override={overrides.badgeAndTagSmall3}
                hasGap={true}
                className={classNames(projectcss.all, sty.badgeAndTagSmall3, {
                  [sty.badgeAndTagSmall3total_state1]: hasVariant(
                    $state,
                    "total",
                    "state1"
                  )
                })}
              >
                {false ? (
                  <div
                    data-plasmic-name={"avatar3"}
                    data-plasmic-override={overrides.avatar3}
                    className={classNames(projectcss.all, sty.avatar3)}
                  >
                    <div
                      data-plasmic-name={"avatar043"}
                      data-plasmic-override={overrides.avatar043}
                      className={classNames(projectcss.all, sty.avatar043)}
                    />
                  </div>
                ) : null}
                {false ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__wLiOu)}
                    displayHeight={"6.956px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"6.956px"}
                    loading={"lazy"}
                    src={{
                      src: image5MEgEtgDTtAc,
                      fullWidth: 6.956,
                      fullHeight: 6.956,
                      aspectRatio: 1
                    }}
                  />
                ) : null}
                <Stack__
                  as={"div"}
                  data-plasmic-name={"placeholder5"}
                  data-plasmic-override={overrides.placeholder5}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.placeholder5)}
                >
                  {false ? (
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__turVv)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    data-plasmic-name={"placeholder6"}
                    data-plasmic-override={overrides.placeholder6}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.placeholder6
                    )}
                  >
                    {"9+"}
                  </div>
                </Stack__>
                {false ? (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___8IsBh)}
                    displayHeight={"6.956px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"6.956px"}
                    loading={"lazy"}
                    src={{
                      src: image60OlFhgAlS20,
                      fullWidth: 6.956,
                      fullHeight: 6.956,
                      aspectRatio: 1
                    }}
                  />
                ) : null}
                {false ? (
                  <div
                    data-plasmic-name={"closeIcon3"}
                    data-plasmic-override={overrides.closeIcon3}
                    className={classNames(projectcss.all, sty.closeIcon3)}
                  >
                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg__ilvXe)}
                      role={"img"}
                    />
                  </div>
                ) : null}
              </Stack__>
            </div>
          </div>
          <Icon4Icon
            className={classNames(projectcss.all, sty.svg__wxr4H, {
              [sty.svgchecked__wxr4HB2Ar]: hasVariant(
                $state,
                "checked",
                "checked"
              )
            })}
            onClick={async event => {
              const $steps = {};
              $steps["updateCount"] =
                $state.count > 0
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["count"]
                        },
                        operation: 3
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;
                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, oldValue - 1);
                        return oldValue - 1;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateCount"] != null &&
                typeof $steps["updateCount"] === "object" &&
                typeof $steps["updateCount"].then === "function"
              ) {
                $steps["updateCount"] = await $steps["updateCount"];
              }
            }}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wEtOj,
              {
                [sty.textchecked__wEtOjB2Ar]: hasVariant(
                  $state,
                  "checked",
                  "checked"
                ),
                [sty.texttotal_state1__wEtOj2IuS]: hasVariant(
                  $state,
                  "total",
                  "state1"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $state.count;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "0";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <Icon6Icon
            className={classNames(projectcss.all, sty.svg__tden, {
              [sty.svgchecked__tdenB2Ar]: hasVariant(
                $state,
                "checked",
                "checked"
              ),
              [sty.svgtotal_state1__tden2IuS]: hasVariant(
                $state,
                "total",
                "state1"
              )
            })}
            onClick={async event => {
              const $steps = {};
              $steps["updateCount2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["count"]
                      },
                      operation: 2
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;
                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, oldValue + 1);
                      return oldValue + 1;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateCount2"] != null &&
                typeof $steps["updateCount2"] === "object" &&
                typeof $steps["updateCount2"].then === "function"
              ) {
                $steps["updateCount2"] = await $steps["updateCount2"];
              }
            }}
            role={"img"}
          />

          <div
            data-plasmic-name={"buttonIcons4"}
            data-plasmic-override={overrides.buttonIcons4}
            className={classNames(projectcss.all, sty.buttonIcons4)}
          >
            {false ? (
              <div
                data-plasmic-name={"badge4"}
                data-plasmic-override={overrides.badge4}
                className={classNames(projectcss.all, sty.badge4)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"badgeAndTagSmall4"}
                  data-plasmic-override={overrides.badgeAndTagSmall4}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.badgeAndTagSmall4)}
                >
                  {false ? (
                    <div
                      data-plasmic-name={"avatar4"}
                      data-plasmic-override={overrides.avatar4}
                      className={classNames(projectcss.all, sty.avatar4)}
                    >
                      <div
                        data-plasmic-name={"avatar044"}
                        data-plasmic-override={overrides.avatar044}
                        className={classNames(projectcss.all, sty.avatar044)}
                      />
                    </div>
                  ) : null}
                  {false ? (
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__oePma)}
                      displayHeight={"6.956px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"6.956px"}
                      loading={"lazy"}
                      src={{
                        src: image7UTphadGZeH3D,
                        fullWidth: 6.956,
                        fullHeight: 6.956,
                        aspectRatio: 1
                      }}
                    />
                  ) : null}
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"placeholder7"}
                    data-plasmic-override={overrides.placeholder7}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.placeholder7)}
                  >
                    {false ? (
                      <Icon2Icon
                        className={classNames(projectcss.all, sty.svg__k1QT)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      data-plasmic-name={"placeholder8"}
                      data-plasmic-override={overrides.placeholder8}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.placeholder8
                      )}
                    >
                      {"9+"}
                    </div>
                  </Stack__>
                  {false ? (
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__uthWg)}
                      displayHeight={"6.956px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"6.956px"}
                      loading={"lazy"}
                      src={{
                        src: image8XpgFtvFrKqsa,
                        fullWidth: 6.956,
                        fullHeight: 6.956,
                        aspectRatio: 1
                      }}
                    />
                  ) : null}
                  {false ? (
                    <div
                      data-plasmic-name={"closeIcon4"}
                      data-plasmic-override={overrides.closeIcon4}
                      className={classNames(projectcss.all, sty.closeIcon4)}
                    >
                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg__f4QGm)}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                </Stack__>
              </div>
            ) : null}
          </div>
        </Stack__>
        <div
          data-plasmic-name={"ovenGen"}
          data-plasmic-override={overrides.ovenGen}
          className={classNames(projectcss.all, sty.ovenGen)}
        />
      </Stack__>
      {false ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__utg5N
          )}
        >
          {"Inside Oven"}
        </div>
      ) : null}
      <PlasmicIcon__
        PlasmicIconType={
          hasVariant($state, "total", "state7")
            ? Icon13Icon
            : hasVariant($state, "total", "state6")
            ? Icon12Icon
            : hasVariant($state, "total", "state5")
            ? Icon11Icon
            : hasVariant($state, "total", "state4")
            ? Icon10Icon
            : hasVariant($state, "total", "state3")
            ? Icon9Icon
            : hasVariant($state, "total", "state1")
            ? Icon8Icon
            : Icon7Icon
        }
        className={classNames(projectcss.all, sty.svg__kIBcD, {
          [sty.svgtotal_state1__kIBcD2IuS]: hasVariant(
            $state,
            "total",
            "state1"
          ),
          [sty.svgtotal_state3__kIBcDMXg5]: hasVariant(
            $state,
            "total",
            "state3"
          ),
          [sty.svgtotal_state4__kIBcDtb7B5]: hasVariant(
            $state,
            "total",
            "state4"
          ),
          [sty.svgtotal_state5__kIBcDOxFc]: hasVariant(
            $state,
            "total",
            "state5"
          ),
          [sty.svgtotal_state6__kIBcDlYlug]: hasVariant(
            $state,
            "total",
            "state6"
          ),
          [sty.svgtotal_state7__kIBcDmVkqC]: hasVariant(
            $state,
            "total",
            "state7"
          )
        })}
        role={"img"}
      />
    </div>
  );
}

const PlasmicDescendants = {
  frame6082: [
    "frame6082",
    "frame6001",
    "frame6078",
    "frame427322247",
    "frame6005",
    "frame427322248",
    "buttonIcons3",
    "badge3",
    "badgeAndTagSmall3",
    "avatar3",
    "avatar043",
    "placeholder5",
    "placeholder6",
    "closeIcon3",
    "buttonIcons4",
    "badge4",
    "badgeAndTagSmall4",
    "avatar4",
    "avatar044",
    "placeholder7",
    "placeholder8",
    "closeIcon4",
    "ovenGen"
  ],

  frame6001: [
    "frame6001",
    "frame6078",
    "frame427322247",
    "frame6005",
    "frame427322248",
    "buttonIcons3",
    "badge3",
    "badgeAndTagSmall3",
    "avatar3",
    "avatar043",
    "placeholder5",
    "placeholder6",
    "closeIcon3",
    "buttonIcons4",
    "badge4",
    "badgeAndTagSmall4",
    "avatar4",
    "avatar044",
    "placeholder7",
    "placeholder8",
    "closeIcon4",
    "ovenGen"
  ],

  frame6078: ["frame6078", "frame427322247", "frame6005"],
  frame427322247: ["frame427322247"],
  frame6005: ["frame6005"],
  frame427322248: [
    "frame427322248",
    "buttonIcons3",
    "badge3",
    "badgeAndTagSmall3",
    "avatar3",
    "avatar043",
    "placeholder5",
    "placeholder6",
    "closeIcon3",
    "buttonIcons4",
    "badge4",
    "badgeAndTagSmall4",
    "avatar4",
    "avatar044",
    "placeholder7",
    "placeholder8",
    "closeIcon4"
  ],

  buttonIcons3: [
    "buttonIcons3",
    "badge3",
    "badgeAndTagSmall3",
    "avatar3",
    "avatar043",
    "placeholder5",
    "placeholder6",
    "closeIcon3"
  ],

  badge3: [
    "badge3",
    "badgeAndTagSmall3",
    "avatar3",
    "avatar043",
    "placeholder5",
    "placeholder6",
    "closeIcon3"
  ],

  badgeAndTagSmall3: [
    "badgeAndTagSmall3",
    "avatar3",
    "avatar043",
    "placeholder5",
    "placeholder6",
    "closeIcon3"
  ],

  avatar3: ["avatar3", "avatar043"],
  avatar043: ["avatar043"],
  placeholder5: ["placeholder5", "placeholder6"],
  placeholder6: ["placeholder6"],
  closeIcon3: ["closeIcon3"],
  buttonIcons4: [
    "buttonIcons4",
    "badge4",
    "badgeAndTagSmall4",
    "avatar4",
    "avatar044",
    "placeholder7",
    "placeholder8",
    "closeIcon4"
  ],

  badge4: [
    "badge4",
    "badgeAndTagSmall4",
    "avatar4",
    "avatar044",
    "placeholder7",
    "placeholder8",
    "closeIcon4"
  ],

  badgeAndTagSmall4: [
    "badgeAndTagSmall4",
    "avatar4",
    "avatar044",
    "placeholder7",
    "placeholder8",
    "closeIcon4"
  ],

  avatar4: ["avatar4", "avatar044"],
  avatar044: ["avatar044"],
  placeholder7: ["placeholder7", "placeholder8"],
  placeholder8: ["placeholder8"],
  closeIcon4: ["closeIcon4"],
  ovenGen: ["ovenGen"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelect2__ArgProps,
          internalVariantPropNames: PlasmicSelect2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelect2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame6082") {
    func.displayName = "PlasmicSelect2";
  } else {
    func.displayName = `PlasmicSelect2.${nodeName}`;
  }
  return func;
}

export const PlasmicSelect2 = Object.assign(
  // Top-level PlasmicSelect2 renders the root element
  makeNodeComponent("frame6082"),
  {
    // Helper components rendering sub-elements
    frame6001: makeNodeComponent("frame6001"),
    frame6078: makeNodeComponent("frame6078"),
    frame427322247: makeNodeComponent("frame427322247"),
    frame6005: makeNodeComponent("frame6005"),
    frame427322248: makeNodeComponent("frame427322248"),
    buttonIcons3: makeNodeComponent("buttonIcons3"),
    badge3: makeNodeComponent("badge3"),
    badgeAndTagSmall3: makeNodeComponent("badgeAndTagSmall3"),
    avatar3: makeNodeComponent("avatar3"),
    avatar043: makeNodeComponent("avatar043"),
    placeholder5: makeNodeComponent("placeholder5"),
    placeholder6: makeNodeComponent("placeholder6"),
    closeIcon3: makeNodeComponent("closeIcon3"),
    buttonIcons4: makeNodeComponent("buttonIcons4"),
    badge4: makeNodeComponent("badge4"),
    badgeAndTagSmall4: makeNodeComponent("badgeAndTagSmall4"),
    avatar4: makeNodeComponent("avatar4"),
    avatar044: makeNodeComponent("avatar044"),
    placeholder7: makeNodeComponent("placeholder7"),
    placeholder8: makeNodeComponent("placeholder8"),
    closeIcon4: makeNodeComponent("closeIcon4"),
    ovenGen: makeNodeComponent("ovenGen"),
    // Metadata about props expected for PlasmicSelect2
    internalVariantProps: PlasmicSelect2__VariantProps,
    internalArgProps: PlasmicSelect2__ArgProps
  }
);

export default PlasmicSelect2;
/* prettier-ignore-end */
