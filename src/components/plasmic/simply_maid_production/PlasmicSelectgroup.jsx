// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dCBp3p2g2cgYAgGFEQRPSF
// Component: BDNlAi2c7YMM
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  initializePlasmicStates,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Select2 from "../../Select2"; // plasmic-import: SfsoP6LMRsE0/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: dCBp3p2g2cgYAgGFEQRPSF/projectcss
import sty from "./PlasmicSelectgroup.module.css"; // plasmic-import: BDNlAi2c7YMM/css

createPlasmicElementProxy;

export const PlasmicSelectgroup__VariantProps = new Array();

export const PlasmicSelectgroup__ArgProps = new Array(
  "selectGroup",
  "options",
  "selectgrouptotlaprice",
  "onSelectgrouptotlapriceChange",
  "variable",
  "onVariableChange"
);

const $$ = {};

function PlasmicSelectgroup__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          options: [
            {
              name: "Inside Fridge",
              price: "+$19",
              state: "state1",
              count: 1,
              isChecked: true
            },
            {
              name: "Kitchen Cabinet",
              price: "+$20",
              state: "state2",
              count: 0,
              isChecked: false
            }
          ]
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "selectgrouptotlaprice",
        type: "writable",
        variableType: "number",
        valueProp: "selectgrouptotlaprice",
        onChangeProp: "onSelectgrouptotlapriceChange"
      },
      {
        path: "select[].selectButtonTotalprice",
        type: "private",
        variableType: "number"
      },
      {
        path: "variable",
        type: "writable",
        variableType: "text",
        valueProp: "variable",
        onChangeProp: "onVariableChange"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"vertical"}
      data-plasmic-override={overrides.vertical}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.vertical
      )}
    >
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return $props.options;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (() => {
          const child$Props = {
            checked: (() => {
              try {
                return $props.options[currentIndex].isChecked == true;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "checked";
                }
                throw e;
              }
            })(),
            className: classNames("__wab_instance", sty.select),
            isChecked: (() => {
              try {
                return $props.options[currentIndex].isChecked;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return false;
                }
                throw e;
              }
            })(),
            key: currentIndex,
            name: (() => {
              try {
                return $props.options[currentIndex].name;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Carpet Steam Clean";
                }
                throw e;
              }
            })(),
            onSelectButtonTotalpriceChange: generateStateOnChangeProp($state, [
              "select",
              __plasmic_idx_0,
              "selectButtonTotalprice"
            ]),
            price: (() => {
              try {
                return $props.options[currentIndex].price;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "+$7";
                }
                throw e;
              }
            })(),
            selectButtonTotalprice: generateStateValueProp($state, [
              "select",
              __plasmic_idx_0,
              "selectButtonTotalprice"
            ]),
            total: (() => {
              try {
                return $props.options[currentIndex].state;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          };
          initializePlasmicStates(
            $state,
            [
              {
                name: "select[].selectButtonTotalprice",
                initFunc: ({ $props, $state, $queries }) => 0
              }
            ],

            [__plasmic_idx_0]
          );
          return (
            <Select2
              data-plasmic-name={"select"}
              data-plasmic-override={overrides.select}
              {...child$Props}
            />
          );
        })();
      })}
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        <React.Fragment>
          <React.Fragment>{""}</React.Fragment>
          {
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.totalCount;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "0";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </h1>
          }

          <React.Fragment>{""}</React.Fragment>
        </React.Fragment>
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  vertical: ["vertical", "select", "text", "h1"],
  select: ["select"],
  text: ["text", "h1"],
  h1: ["h1"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelectgroup__ArgProps,
          internalVariantPropNames: PlasmicSelectgroup__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelectgroup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "vertical") {
    func.displayName = "PlasmicSelectgroup";
  } else {
    func.displayName = `PlasmicSelectgroup.${nodeName}`;
  }
  return func;
}

export const PlasmicSelectgroup = Object.assign(
  // Top-level PlasmicSelectgroup renders the root element
  makeNodeComponent("vertical"),
  {
    // Helper components rendering sub-elements
    select: makeNodeComponent("select"),
    text: makeNodeComponent("text"),
    h1: makeNodeComponent("h1"),
    // Metadata about props expected for PlasmicSelectgroup
    internalVariantProps: PlasmicSelectgroup__VariantProps,
    internalArgProps: PlasmicSelectgroup__ArgProps
  }
);

export default PlasmicSelectgroup;
/* prettier-ignore-end */
