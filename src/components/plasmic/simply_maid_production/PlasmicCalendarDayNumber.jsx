// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dCBp3p2g2cgYAgGFEQRPSF
// Component: 1N_Heiz2pIMG
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: dCBp3p2g2cgYAgGFEQRPSF/projectcss
import sty from "./PlasmicCalendarDayNumber.module.css"; // plasmic-import: 1N_Heiz2pIMG/css

createPlasmicElementProxy;

export const PlasmicCalendarDayNumber__VariantProps = new Array("style2");

export const PlasmicCalendarDayNumber__ArgProps = new Array("day", "onClick");

const $$ = {};

function PlasmicCalendarDayNumber__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "style2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.style2
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootstyle2_current]: hasVariant($state, "style2", "current"),
          [sty.rootstyle2_muted]: hasVariant($state, "style2", "muted"),
          [sty.rootstyle2_selected]: hasVariant($state, "style2", "selected")
        }
      )}
    >
      <div
        data-plasmic-name={"icon"}
        data-plasmic-override={overrides.icon}
        className={classNames(projectcss.all, sty.icon, {
          [sty.iconstyle2_current]: hasVariant($state, "style2", "current"),
          [sty.iconstyle2_muted]: hasVariant($state, "style2", "muted"),
          [sty.iconstyle2_selected]: hasVariant($state, "style2", "selected")
        })}
        onClick={args.onClick}
      >
        <div
          data-plasmic-name={"date"}
          data-plasmic-override={overrides.date}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.date,
            {
              [sty.datestyle2_muted]: hasVariant($state, "style2", "muted"),
              [sty.datestyle2_selected]: hasVariant(
                $state,
                "style2",
                "selected"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.day;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "31";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "icon", "date"],
  icon: ["icon", "date"],
  date: ["date"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCalendarDayNumber__ArgProps,
          internalVariantPropNames: PlasmicCalendarDayNumber__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCalendarDayNumber__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCalendarDayNumber";
  } else {
    func.displayName = `PlasmicCalendarDayNumber.${nodeName}`;
  }
  return func;
}

export const PlasmicCalendarDayNumber = Object.assign(
  // Top-level PlasmicCalendarDayNumber renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    icon: makeNodeComponent("icon"),
    date: makeNodeComponent("date"),
    // Metadata about props expected for PlasmicCalendarDayNumber
    internalVariantProps: PlasmicCalendarDayNumber__VariantProps,
    internalArgProps: PlasmicCalendarDayNumber__ArgProps
  }
);

export default PlasmicCalendarDayNumber;
/* prettier-ignore-end */
