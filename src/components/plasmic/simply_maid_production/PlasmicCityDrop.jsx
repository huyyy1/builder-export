// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dCBp3p2g2cgYAgGFEQRPSF
// Component: ukDQdkymVLgV
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: dCBp3p2g2cgYAgGFEQRPSF/projectcss
import sty from "./PlasmicCityDrop.module.css"; // plasmic-import: ukDQdkymVLgV/css
import ArrowDropDownIcon from "./icons/PlasmicIcon__ArrowDropDown"; // plasmic-import: FG5DQF3s8eVY/icon

createPlasmicElementProxy;

export const PlasmicCityDrop__VariantProps = new Array();

export const PlasmicCityDrop__ArgProps = new Array();

const $$ = {};

function PlasmicCityDrop__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"dropdownContainer"}
        data-plasmic-override={overrides.dropdownContainer}
        hasGap={true}
        className={classNames(projectcss.all, sty.dropdownContainer)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__nmwr8)}>
          <div className={classNames(projectcss.all, sty.freeBox___8Cx3)}>
            <AntdDropdown
              data-plasmic-name={"dropdown"}
              data-plasmic-override={overrides.dropdown}
              className={classNames("__wab_instance", sty.dropdown)}
              dropdownMenuScopeClassName={sty["dropdown__dropdownMenu"]}
              menuItemClassName={classNames({
                [sty["pcls_SAJ3xb4_l99w"]]: true
              })}
              menuItems={() => (
                <React.Fragment>
                  <AntdMenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.menuItem__k3Mbi
                    )}
                    key={"menu-item-1"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5LjNt
                      )}
                    >
                      {"Menu item"}
                    </div>
                  </AntdMenuItem>
                  <AntdMenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.menuItem__xq0Xa
                    )}
                    key={"menu-item-2"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ew5Ac
                      )}
                    >
                      {"Menu item"}
                    </div>
                  </AntdMenuItem>
                </React.Fragment>
              )}
              menuItemsJson={[
                { type: "item", value: "action1", label: "Action 1" },
                { type: "item", value: "action2", label: "Action 2" }
              ]}
            >
              <AntdButton
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hzIrI
                  )}
                >
                  {"Dropdown"}
                </div>
              </AntdButton>
            </AntdDropdown>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___9E9Yk)}>
            <ArrowDropDownIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          </div>
        </div>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "dropdownContainer", "dropdown", "button", "svg"],
  dropdownContainer: ["dropdownContainer", "dropdown", "button", "svg"],
  dropdown: ["dropdown", "button"],
  button: ["button"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCityDrop__ArgProps,
          internalVariantPropNames: PlasmicCityDrop__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCityDrop__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCityDrop";
  } else {
    func.displayName = `PlasmicCityDrop.${nodeName}`;
  }
  return func;
}

export const PlasmicCityDrop = Object.assign(
  // Top-level PlasmicCityDrop renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dropdownContainer: makeNodeComponent("dropdownContainer"),
    dropdown: makeNodeComponent("dropdown"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicCityDrop
    internalVariantProps: PlasmicCityDrop__VariantProps,
    internalArgProps: PlasmicCityDrop__ArgProps
  }
);

export default PlasmicCityDrop;
/* prettier-ignore-end */
