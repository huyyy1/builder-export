// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dCBp3p2g2cgYAgGFEQRPSF
// Component: Ez9OVl5RaAq3
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: dCBp3p2g2cgYAgGFEQRPSF/projectcss
import sty from "./PlasmicLocationDropdown.module.css"; // plasmic-import: Ez9OVl5RaAq3/css

createPlasmicElementProxy;

export const PlasmicLocationDropdown__VariantProps = new Array();

export const PlasmicLocationDropdown__ArgProps = new Array();

const $$ = {};

function PlasmicLocationDropdown__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"frame427322500"}
      data-plasmic-override={overrides.frame427322500}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.frame427322500
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <AntdDropdown
          data-plasmic-name={"dropdown"}
          data-plasmic-override={overrides.dropdown}
          className={classNames("__wab_instance", sty.dropdown)}
          disabled={false}
          dropdownMenuScopeClassName={sty["dropdown__dropdownMenu"]}
          fakeOpen={false}
          menuItems={() => (
            <React.Fragment>
              <AntdMenuItem
                className={classNames("__wab_instance", sty.menuItem__wYkgR)}
                key={"menu-item-1"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__l4QvV
                  )}
                >
                  {"Menu item"}
                </div>
              </AntdMenuItem>
              <AntdMenuItem
                className={classNames("__wab_instance", sty.menuItem__jfYMt)}
                key={"menu-item-2"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qcNOp
                  )}
                >
                  {"Menu item"}
                </div>
              </AntdMenuItem>
            </React.Fragment>
          )}
          menuItemsJson={[
            { type: "item", value: "action1", label: "Action 1" },
            { type: "item", value: "action2", label: "Action 2" }
          ]}
          trigger={"click"}
        >
          <AntdButton
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hhoX
              )}
            >
              {"Dropdown"}
            </div>
          </AntdButton>
        </AntdDropdown>
      </div>
      <div
        data-plasmic-name={"arrowDropDown"}
        data-plasmic-override={overrides.arrowDropDown}
        className={classNames(projectcss.all, sty.arrowDropDown)}
      />
    </Stack__>
  );
}

const PlasmicDescendants = {
  frame427322500: [
    "frame427322500",
    "freeBox",
    "dropdown",
    "button",
    "arrowDropDown"
  ],

  freeBox: ["freeBox", "dropdown", "button"],
  dropdown: ["dropdown", "button"],
  button: ["button"],
  arrowDropDown: ["arrowDropDown"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLocationDropdown__ArgProps,
          internalVariantPropNames: PlasmicLocationDropdown__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLocationDropdown__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame427322500") {
    func.displayName = "PlasmicLocationDropdown";
  } else {
    func.displayName = `PlasmicLocationDropdown.${nodeName}`;
  }
  return func;
}

export const PlasmicLocationDropdown = Object.assign(
  // Top-level PlasmicLocationDropdown renders the root element
  makeNodeComponent("frame427322500"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    dropdown: makeNodeComponent("dropdown"),
    button: makeNodeComponent("button"),
    arrowDropDown: makeNodeComponent("arrowDropDown"),
    // Metadata about props expected for PlasmicLocationDropdown
    internalVariantProps: PlasmicLocationDropdown__VariantProps,
    internalArgProps: PlasmicLocationDropdown__ArgProps
  }
);

export default PlasmicLocationDropdown;
/* prettier-ignore-end */
