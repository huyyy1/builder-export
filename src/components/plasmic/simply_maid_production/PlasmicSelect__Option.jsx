// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dCBp3p2g2cgYAgGFEQRPSF
// Component: tDJP7FAhRHGZ
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import * as pp from "@plasmicapp/react-web";
import OptionDetail from "../../OptionDetail"; // plasmic-import: mnzKEbDlzSnD/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: dCBp3p2g2cgYAgGFEQRPSF/projectcss
import sty from "./PlasmicSelect__Option.module.css"; // plasmic-import: tDJP7FAhRHGZ/css
import SUPER__PlasmicSelect from "./PlasmicSelect"; // plasmic-import: 5EDfpQe-K5LL/render

createPlasmicElementProxy;

export const PlasmicSelect__Option__VariantProps = new Array(
  "isSelected",
  "isHighlighted",
  "isDisabled",
  "optionStyle"
);

export const PlasmicSelect__Option__ArgProps = new Array(
  "children",
  "value",
  "textValue",
  "optionDetails"
);

const $$ = {};

function PlasmicSelect__Option__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "isSelected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isSelected
      },
      {
        path: "isHighlighted",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isHighlighted
      },
      {
        path: "isDisabled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isDisabled
      },
      {
        path: "optionStyle",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.optionStyle
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const superContexts = {
    Select: React.useContext(SUPER__PlasmicSelect.Context)
  };
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootSelect__showStartIcon]: hasVariant(
            (superContexts.Select && superContexts.Select.variants) || {},
            "showStartIcon",
            "showStartIcon"
          ),
          [sty.rootisDisabled]: hasVariant($state, "isDisabled", "isDisabled"),
          [sty.rootisHighlighted]: hasVariant(
            $state,
            "isHighlighted",
            "isHighlighted"
          ),
          [sty.rootisSelected]: hasVariant($state, "isSelected", "isSelected"),
          [sty.rootoptionStyle_detailed]: hasVariant(
            $state,
            "optionStyle",
            "detailed"
          )
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__rpb, {
          [sty.freeBoxSelect__showStartIcon__rpb1I1Ao]: hasVariant(
            (superContexts.Select && superContexts.Select.variants) || {},
            "showStartIcon",
            "showStartIcon"
          ),
          [sty.freeBoxisDisabled__rpBpi3Tj]: hasVariant(
            $state,
            "isDisabled",
            "isDisabled"
          ),
          [sty.freeBoxisHighlighted__rpbafhj0]: hasVariant(
            $state,
            "isHighlighted",
            "isHighlighted"
          ),
          [sty.freeBoxisSelected__rpBljWw7]: hasVariant(
            $state,
            "isSelected",
            "isSelected"
          )
        })}
      >
        <div
          data-plasmic-name={"ellipse"}
          data-plasmic-override={overrides.ellipse}
          className={classNames(projectcss.all, sty.ellipse, {
            [sty.ellipseSelect__showStartIcon]: hasVariant(
              (superContexts.Select && superContexts.Select.variants) || {},
              "showStartIcon",
              "showStartIcon"
            ),
            [sty.ellipseisDisabled]: hasVariant(
              $state,
              "isDisabled",
              "isDisabled"
            ),
            [sty.ellipseisSelected]: hasVariant(
              $state,
              "isSelected",
              "isSelected"
            )
          })}
        />

        <div
          data-plasmic-name={"labelContainer"}
          data-plasmic-override={overrides.labelContainer}
          className={classNames(projectcss.all, sty.labelContainer)}
        >
          {renderPlasmicSlot({
            defaultContents: "Option",
            value: args.children,
            className: classNames(sty.slotTargetChildren, {
              [sty.slotTargetChildrenSelect__showStartIcon]: hasVariant(
                (superContexts.Select && superContexts.Select.variants) || {},
                "showStartIcon",
                "showStartIcon"
              ),
              [sty.slotTargetChildrenisDisabled]: hasVariant(
                $state,
                "isDisabled",
                "isDisabled"
              ),
              [sty.slotTargetChildrenisHighlighted]: hasVariant(
                $state,
                "isHighlighted",
                "isHighlighted"
              ),
              [sty.slotTargetChildrenisSelected]: hasVariant(
                $state,
                "isSelected",
                "isSelected"
              ),
              [sty.slotTargetChildrenoptionStyle_detailed]: hasVariant(
                $state,
                "optionStyle",
                "detailed"
              )
            })
          })}
        </div>
      </Stack__>
      <div
        className={classNames(projectcss.all, sty.freeBox__bt8O0, {
          [sty.freeBoxoptionStyle_detailed__bt8O0BVh1F]: hasVariant(
            $state,
            "optionStyle",
            "detailed"
          )
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <OptionDetail
              className={classNames("__wab_instance", sty.optionDetail__ucPDz)}
            />
          ),

          value: args.optionDetails
        })}
      </div>
    </Stack__>
  );
}

function useBehavior(props, ref) {
  return pp.useSelectOption(
    PlasmicSelect__Option,
    props,
    {
      isSelectedVariant: { group: "isSelected", variant: "isSelected" },
      isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
      isHighlightedVariant: {
        group: "isHighlighted",
        variant: "isHighlighted"
      },
      labelSlot: "children",
      root: "root",
      labelContainer: "labelContainer"
    },
    ref
  );
}

const PlasmicDescendants = {
  root: ["root", "ellipse", "labelContainer"],
  ellipse: ["ellipse"],
  labelContainer: ["labelContainer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSelect__Option__ArgProps,
          internalVariantPropNames: PlasmicSelect__Option__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelect__Option__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelect__Option";
  } else {
    func.displayName = `PlasmicSelect__Option.${nodeName}`;
  }
  return func;
}

export const PlasmicSelect__Option = Object.assign(
  // Top-level PlasmicSelect__Option renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    ellipse: makeNodeComponent("ellipse"),
    labelContainer: makeNodeComponent("labelContainer"),
    // Metadata about props expected for PlasmicSelect__Option
    internalVariantProps: PlasmicSelect__Option__VariantProps,
    internalArgProps: PlasmicSelect__Option__ArgProps,
    useBehavior
  }
);

export default PlasmicSelect__Option;
/* prettier-ignore-end */
